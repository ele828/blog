<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Eric&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.dobest.me/"/>
  <updated>2018-03-08T00:11:08.000Z</updated>
  <id>http://www.dobest.me/</id>
  
  <author>
    <name>Eric Wong</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Monorepo Practice</title>
    <link href="http://www.dobest.me/blog/2018/03/07/Monorepo-Practice/"/>
    <id>http://www.dobest.me/blog/2018/03/07/Monorepo-Practice/</id>
    <published>2018-03-07T15:46:37.000Z</published>
    <updated>2018-03-08T00:11:08.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Monorepo-Practice"><a href="#Monorepo-Practice" class="headerlink" title="Monorepo Practice"></a>Monorepo Practice</h1><h2 id="Background"><a href="#Background" class="headerlink" title="Background"></a>Background</h2><p>When dealing with large projects containing several shared libraries, it’s usually tricky to contribute code across multiple repositories. Things even become harder when you have to handle both public and private repositories that have dependent relationships, or those dependent repositories are on different platforms. Below is a solution based on the Monorepo approach and git subrepo, which is trying to make it easier to manipulate across multiple repositories.</p><h2 id="Convention"><a href="#Convention" class="headerlink" title="Convention"></a>Convention</h2><h3 id="Folder-Structure"><a href="#Folder-Structure" class="headerlink" title="Folder Structure"></a>Folder Structure</h3><p>In order to keep consistent with other Monorepos, it’s recommended to follow the designated folder structure.</p><pre><code>.├── LICENSE├── README.md├── lerna.json├── package.json├── packages│   ├── main-repo│   ├── ringcentral-integration│   └── ringcentral-widgets└── yarn.lock</code></pre><p>All subrepos should be placed in <code>pakages</code> folder, including the original mainrepo. In this way, it’s much more straightforward to manage.</p><h3 id="Git-Subrepo"><a href="#Git-Subrepo" class="headerlink" title="Git Subrepo"></a>Git Subrepo</h3><p>It’s highly recommended to use <code>git subrepo</code> to take control of your subrepo. <code>git-subrepo</code> is an open source tool,  which leverages <strong>git hash objects</strong> to manage subrepos. It’s much easier to getting along with than <code>git subtree</code>, if follow workflows below, you will never run into unexpected circumstances.</p><h3 id="Lerna"><a href="#Lerna" class="headerlink" title="Lerna"></a>Lerna</h3><p>Since there will be serveral subrepo projects inside current main repo, it becomes harder to operate across subrepos, here is where Lerna comes into play. By using Lerna, you can easily run any shell commands and npm scripts in subrepos, Lerna also presents bunch of useful features that can help you out.</p><h2 id="Setup"><a href="#Setup" class="headerlink" title="Setup"></a>Setup</h2><ol><li>Install <code>git subrepo</code>, if on Mac, you can install git-subrepo by running<br><code>brew install git-subrepo</code></li></ol><p>Otherwise, follow installation instructions on  <a href="https://github.com/ingydotnet/git-subrepo" target="_blank" rel="noopener">Git Subrep</a> docs.</p><ol><li><p>Clone remote project into <strong>subfolder</strong>, run<br><code>git subrepo clone &lt;remote-url&gt; packages/&lt;subdir&gt;</code></p></li><li><p>Move files in main repo to a <strong>subfolder</strong>.</p></li><li>Put configuration files needed in the root folder, update legacy configurations, e.g. <code>.gitignore</code>.</li><li>Set up Lerna, create bunch of npm scripts to run <strong>boostrap</strong>, <strong>build</strong>, <strong>test</strong> etc.</li><li>Set up development env by using <code>alias</code>, so that you can develop directly across multiple projects.</li><li>Finally, we get there!</li></ol><h2 id="Workflow"><a href="#Workflow" class="headerlink" title="Workflow"></a>Workflow</h2><p>After everything is set up, it’s now ready to get to day-to-day work. Since we have to manipulate several subrepos coordinately, the <strong>git flow</strong> would be a bit tricky, so the following graph shows a recommended subrepo workflow:</p><p><img src="/images/monorepo_structure.png" alt="Monorepo Structure"></p><p>This is an overview of Repository Relationships and overall action path, the graph below describes 3 action paths:</p><p><img src="/images/monorepo_flow.png" alt="Monorepo Flow"></p><h3 id="Before-Sprint"><a href="#Before-Sprint" class="headerlink" title="Before Sprint"></a>Before Sprint</h3><p>You usually need to pull changes from subrepo remote to keep subrepo up to date. Follow <strong>Pull Subrepo</strong> instruction.</p><h3 id="During-Sprint"><a href="#During-Sprint" class="headerlink" title="During Sprint"></a>During Sprint</h3><ul><li><p><strong>Daily work</strong><br>Follow <strong>Contribute</strong> instruction.</p></li><li><p><strong>Sync up with remote subrepo</strong><br>Sometimes you want to pull or push subrepo changes to perform special operations, in this case, you can follow <strong>Pull Subrepo</strong> and <strong>Push Subrepo</strong> instruction.</p></li></ul><h3 id="After-Sprint"><a href="#After-Sprint" class="headerlink" title="After Sprint"></a>After Sprint</h3><p>Push subrepo changes to subrepo remote. Follow <strong>Push Subrepo</strong> instruction.</p><blockquote><p>Note: Subrepo push is a bit different, you need to use <code>git subrepo push &lt;subdir&gt; -r &lt;remote&gt; -b &lt;remote-branch&gt;</code> to push commits to your own fork instead of pushing directly to remote main repo.  </p></blockquote><h2 id="Precautions"><a href="#Precautions" class="headerlink" title="Precautions"></a>Precautions</h2><ul><li><strong>Do</strong> pull from remote repo after pushed to ensure tree hash is exactly the same as remote one, this is really essential, otherwise next time when you do <code>git subrepo push</code>, git subrepo can <strong>not</strong> find correct commit ancestor, which will mess up your commits by including too many legacy commits.</li></ul><ul><li><strong>Do NOT</strong> merge code to main repo when someone is syncing code with subrepo remote, otherwise it will cause <code>git-subrepo</code> to find a wrong common ancestors, which will include dirty commits next time you push.</li></ul><ul><li><strong>Do</strong> ensure that the tree hash is correct after pull from remote repo. You can use <code>git subrepo branch</code> to check the tree hash.</li><li>Better <strong>Do NOT</strong> pull from remote when current branch is not clean, because it will make tree hash different from remote at this point and a bit hard to figure out what’s going on here, but it won’t actually prevent you from pushing code back. The recommended way to pull from subrepo remote is to do it in a new clean branch.</li></ul><h2 id="References"><a href="#References" class="headerlink" title="References"></a>References</h2><ul><li><a href="https://github.com/ingydotnet/git-subrepo" target="_blank" rel="noopener">Git Subrep</a></li><li><a href="https://github.com/ingydotnet/git-subrepo/wiki" target="_blank" rel="noopener">Git Subrepo Principle</a></li><li><a href="https://git-scm.com/book/en/v2/Git-Internals-Git-Objects" target="_blank" rel="noopener">Git Internals - Git Objects</a></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Monorepo-Practice&quot;&gt;&lt;a href=&quot;#Monorepo-Practice&quot; class=&quot;headerlink&quot; title=&quot;Monorepo Practice&quot;&gt;&lt;/a&gt;Monorepo Practice&lt;/h1&gt;&lt;h2 id=&quot;Backg
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Facebook面试小记</title>
    <link href="http://www.dobest.me/blog/2017/03/21/Facebook%E9%9D%A2%E8%AF%95%E5%B0%8F%E8%AE%B0/"/>
    <id>http://www.dobest.me/blog/2017/03/21/Facebook面试小记/</id>
    <published>2017-03-20T16:00:00.000Z</published>
    <updated>2018-03-07T15:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>在美国实习期间我同时也在寻找留美正式工作的机会。于是我把简历给了在脸书工作的 Cat Chen 大牛，之后他表示愿意帮助我。虽然今后应该不会入职脸书，但在此我真诚地感谢他的相助。</p><a id="more"></a><p>由于面试签署了保密协议，文章不会透露具体的面试内容，因此我只简述大致的流程并谈谈自己的一些看法和建议。本篇是关于 Facebook Front End Engineering Intern 的文章，因为签证的一些问题，我不得不转成实习岗位。</p><p>其实早在前年寻找赴美实习的机会时，我就投递过脸书的实习岗位，但当时的背景无法满足要求，最后也就不了了之。好在这次有了 Cat Chen 的帮助，加上自己也丰富了一些经历，于是很快就接到了 Recruiter 的橄榄枝。（美国IT企业的招聘过程大多是由 Recruiter 全程协助的。）</p><h3 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h3><p>在我看来，国外企业的面试机会也不是很难拿，但前提是：</p><ul><li>英语水平过关，会基本的英文书信，以及一定的口语交流能力。</li><li>最好有人内推，这样增加你简历被查看的几率；不过Facebook即便是内推，也不保证一定有面试机会，因为有专门的 Recruiter 会进行第一轮的简历筛选，据我所知这一轮通过率也不是很高；</li><li>因此，需要你有较好的背景，比如名校，突出的实习经历或其他背景；</li><li>基础技术水平过硬，比如刷好Leetcode，并掌握你相应面试岗位的相关技术。</li></ul><p>对于我个人而言，由于我大学是在国际班，也在美国待了半年，因此基本的交流还可以保障。个人简历和技术也比较有信心，加上在美国实习的经历，还有 Cat Chen 这样的牛推，也就顺理成章地拿到了面试机会。</p><p>在准备面试的过程中，我把 Leetcode 刷了大概两百题，付费顺带把相关的 Tag 也给完成了。其实最后我也没被问到 Leetcode 上面的题，但历时两三个月的刷题经历，让我在编码能力上有了不小的提高。</p><h3 id="Phone-Screen"><a href="#Phone-Screen" class="headerlink" title="Phone Screen"></a>Phone Screen</h3><p>在邮件中一切谈妥之后，Recruiter 安排了第一轮面试，即 Phone Screen。面试的时长大致为20-30分钟，由 Recruiter 询问一些基本情况，例如：个人经历、技术情况等。最后 Recruiter 会提出5题左右的与岗位相关的技术问题。由于我申请岗位是 Front End Engineer，显然这些问题都是前端相关的。通过这样的提问，Recruiter 可以筛选掉一些明显不合格的候选人，从而节约技术面试官的时间。</p><p>面试过后，Recruiter 会很快告知你结果，如果通过，将安排下一轮的技术面试。</p><h3 id="一面"><a href="#一面" class="headerlink" title="一面"></a>一面</h3><p>面试官首先会介绍该轮面试的安排，基本流程是：自我介绍、Coding、询问问题，其中 Coding 占面试85%左右的时间。</p><p>之后，他介绍了自己是负责内部平台的开发工作，并负责维护 Draft.js 项目。</p><p>然后面试官会让你进行自我介绍并谈谈实习项目以及提出一些其他的问题。这一部分我觉得需要提前进行准备，比如通常的问题可能是：</p><ul><li>Why Facebook? </li><li>Why Front End Engineer?</li><li>Describe a difficult challenge you faced.</li><li>What do you do during your internship?</li><li>and so on…</li></ul><p>紧接着面试官会让你切换到 Coderpad 在线编辑器，然后抛出一至两道的技术问题，它可能是关于前端方面的编程问题，也可能是关于数据结构及算法这样的基础问题。脸书的出题套路大多还是从题库中抽取的，因此你可以在面试前做好充分的准备。</p><p>一面的这道题是一个非常基础但考察点比较详尽的题，基本上囊括了设计模式、数组的用法（可变与不可变）、闭包、JavaScript 上下文切换（call、apply）以及哈希表等知识。</p><p>其实这道题早在几年前阅读《JavaScript设计模式》的时候我就已经写过，但在面试特定设计的题目环境下，我还是写出了一个 Bug 。好在面试官的提示，我很快修复了它。</p><p>最后问了他一些问题，就结束了面试。</p><p>对于这一面，我其实没有提前进行太多准备，就随口问了一个关于脸书前端工程化方面的问题，其实也没有得到特别满意的答复。</p><p>抱着比较随意的心态完成了第一轮面试，总体感觉一般，还写出一个 Bug。正要打算 Move on 的时候就收到 Recruiter 的邮件，表示面试通过将继续安排下一轮的面试。</p><h3 id="二面"><a href="#二面" class="headerlink" title="二面"></a>二面</h3><p>在吸取一面的经验教训之后，这次我做了比较充分的准备。提前想好了需要提问的问题，查看了近乎所有的面经，也复习了基础知识。</p><p>这一轮面试跟一面的大体流程是一样的，但比一面难度高出了许多，这次我被问了两道题，题目涉及的知识点有：递归与迭代、栈及数组、多叉树、DOM原生API、性能优化、ES2015 相关的细节等等。</p><p>但这些题其实如果对前端基础知识有了解，并且有比较好的学科基础和编码能力还是不难解决的。</p><p>这样的面试题需要在较短的时间内完成编码，且需要保证完成的质量。因此其实对候选人的动手能力及基础知识有较高的要求。</p><p>我在这一面表现得还算不错，因此很快收到了 Recruiter 关于下一步安排的邮件。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>最后回过头看看这次的面试，其实也没有想象中的那么遥不可及。但我觉得这样的面试至少能保证候选人较好的基础知识和编码能力，同时，面试的沟通交流能力也是很重要的考察部分。</p><p>通过这次的面试，我也收获了很多宝贵的经验，虽然最后因为签证的问题没有谈妥，加之自己在美半年的一些体验，最终决定暂时搁置这个实习机会。我觉得只要有梦想，也未必需要舍近求远，在哪里都能找到合适的机会和成长的空间。最后，希望这篇文章能帮助到国内有志于赴美工作的小伙伴，共勉！</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在美国实习期间我同时也在寻找留美正式工作的机会。于是我把简历给了在脸书工作的 Cat Chen 大牛，之后他表示愿意帮助我。虽然今后应该不会入职脸书，但在此我真诚地感谢他的相助。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>北美实习总结(工作篇)</title>
    <link href="http://www.dobest.me/blog/2017/03/20/%E5%8C%97%E7%BE%8E%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93(%E5%B7%A5%E4%BD%9C%E7%AF%87)/"/>
    <id>http://www.dobest.me/blog/2017/03/20/北美实习总结(工作篇)/</id>
    <published>2017-03-19T16:00:00.000Z</published>
    <updated>2018-03-07T15:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>刚刚结束实习回国，这两天终于把时差给倒过来了，抓紧趁热把总结写一下。</p><p>我是去年九月份去的美国，在此之前大半年都忙碌于各种简历投递、面试及签证的事情上。在一切安排妥当之后，终于在去年9月初带着对未知的恐惧和向往的心情搭上了赴美的航班。</p><p>我实习公司是一家叫 BitTitan 的西雅图创业公司。其实叫创业公司也不太准确，因为公司已经创办了将近十年，公司的业务是面向企业的软件，成立之初的主要业务是帮助微软 Office 365 进行数据迁移，公司每年都保持着一定的营收增长，处于稳步发展的阶段。公司不大，在职员工大概有 200-250 人左右，研发团队算上新加坡Office 大概有 50-60 人，而我所在的团队属于 Development Team 里的 Front End Team，因而我的 Title 是 Software Design Engineer Intern 但做的事情仍大多是前端相关的，偶尔会写一些C#代码（没错，公司是清一色的微软技术栈，创始人、CTO以及很多同事都是前微软员工）。</p><p>我的实习是六个月整，为什么是这个时间其实背后也有原因（签证豁免），暂时按下不表，之后如果有时间我会再写写关于如何寻找北美实习机会及签证等等相关经验。我的实习大致可以分为以下几个阶段：</p><ul><li>入职的第一个月熟悉内部工具及 Code Base，因此我的工作大都是修复一些 Bug 或开发小的需求。</li><li>第2、3个月我独立开发了一款代码生成器： Ember Model Generator。</li><li>第4个月开发 ESLint 插件，检查各种内部特定的规则，保障代码质量。</li><li>第5、6个月参与公司业务开发。</li></ul><p>在入职之初，我被安排了一个实习经理，在这之后每两周需要跟这位经理一起碰面聊聊实习情况，同时团队也给我安排了一位 Mentor，负责帮助我解决技术方面的问题。此外，我还需要每周跟我们组的老大，即 Lead，进行 1 on 1 的 meet up，我的实习任务也是由这位 Lead 安排的。稍大一些的项目也都会根据实习生的个人特点及意愿进行安排，从这些方面，确实感受到企业对实习生的重视。</p><h3 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h3><p>值得一提的是，公司对自动化程度及代码质量的要求很高，比如后端的 REST API 层均是通过代码生成器生成的，而各种本机的配置、数据库、服务器、代码编译等过程都只需要一行命令即可完成。前端项目有完善的 Unit Test、Integration Test 及 Acceptance Test，在 Merge 代码之后，部署机器会运行所有测试及 Linting Rules。在这样严格的测试下，公司的产品在长期迭代过程中有了较好的保障且运行良好。</p><p>有趣的是，我也亲自参与了公司自动化流程的开发工作，也就是前文提到的 <code>Ember Model Generator</code>。公司前端使用的是 <code>Ember</code> 框架，而 <code>Ember</code> 有一个 <code>Model</code> 层，这一层在以往需要开发人员根据 Swagger 文档或后端 Entity 进行手动编写，然而这一部分的工作大都是机械化的，因此我们考虑使用代码生成器进行 <code>Model</code>  代码的生成。这个项目的难度适中，因此最终由我一个人来负责开发。我用了整整两个月的时间完成了一个能真正运行的生成器并使用正式的项目进行了完善的测试。这个生成器不仅负责代码的生成工作，它还可以对已有项目进行无缝升级。最后，我又花了一个礼拜附带开发了模型层关系图的可视化工具来帮助开发者理解 <code>Model</code> 之间的联系。整个项目的难点主要在于需要对已有的 <code>Ember Models</code> 进行研究，抽象出公共可用的生成模式，分析模型之间的关系，判断 <code>Field</code> 的类型，并需要对生成器本身进行良好的设计及测试。最终，这个生成器生成的代码与以往纯手工编写的模型匹配程度大致在<code>93%</code>左右，配合 <code>Migration</code> 升级工具，模型能达到百分之百的准确率。</p><p>这个工具能大大提高开发者的工作效率，与此同时，统一了模型的管理，保证前后端模型的同步。</p><h3 id="工程化"><a href="#工程化" class="headerlink" title="工程化"></a>工程化</h3><h4 id="统一工具链"><a href="#统一工具链" class="headerlink" title="统一工具链"></a>统一工具链</h4><p>我的 Lead 是一位美国人，有近10年的软件开发经验，在他的管理之下，整个前端的工程化程度还算比较高。在团队的协作开发环境下，如何较好的进行规范统一也是一门学问。在内部，我们有一款 <code>BTFE</code> 的CLI工具，这款工具统一了前端开发的整个流程。包含功能有：项目创建、依赖的安装与清理、配置管理、测试、Linting、文档生成、Proxy、开发服务器等等。这样的工具在工程化的开发下，能起到良好统一的功效，同时也是自动化的一部分内容。例如项目的创建，如果手动通过 <code>Ember</code> 或 <code>NPM</code> 也可达到同样的目的，但这样的做法会浪费很多时间，也会增加人工出错的几率。因为项目需要有特定的目录结构及配置，通过自动化的方式能大大提高效率并保证绝对统一。再比如依赖的安装及测试，因为大型的项目会有复杂的结构及依赖关系，因此在安装及测试过程中，需要确定依赖关系并逐一运行脚本，<code>BTFE</code>工具就很好地处理了项目的相互依赖问题并提供了并行的脚本运行策略。</p><h4 id="确保代码质量"><a href="#确保代码质量" class="headerlink" title="确保代码质量"></a>确保代码质量</h4><p>代码质量在长期迭代的大型项目中尤为重要，我实习的团队对代码质量的要求也很高。</p><h5 id="Linting检测"><a href="#Linting检测" class="headerlink" title="Linting检测"></a>Linting检测</h5><p>由于JavaScript的灵活性，团队引入了<code>ESLint</code>, <code>JSHint</code>及<code>JSCS</code>等代码质量检测工具，争取在代码编写阶段通过错误与警告来消除不合格的代码，如有遗漏，在后续的持续集成环境中也会直接被打回，从而要求开发者手动修复。值得一提的是，有一些 Linting 工具还可以帮助检测常见的 JavaScript 错误，提高代码的健壮性。</p><h5 id="Code-Review"><a href="#Code-Review" class="headerlink" title="Code Review"></a>Code Review</h5><p>单纯通过工具进行检测只能减少一些代码风格的不一致，而 <code>Code Review</code> 过程则提高了代码本身的正确性。通过与 Reviewer 的沟通，可以不断改进并修复一些潜在的问题。这个过程通常比较严格，我的 Mentor 对代码要求非常高，小到变量的命名，注释的编写，CSS的建议，大到整体的结构，代码实现，接口设计与组件的使用等等。通常这个过程，我都会被指出不少问题。通过这样的审核方式，我也不断提高了代码质量，并从 Reviewer 那里学到了很多知识。</p><p><code>Code Review</code> 不仅仅能减少 Bug, 提高代码质量，同时也可以从别人的实现上学习到不少知识，促进团队成员的共同进步。</p><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><p>通过编写测试用例，我们能在迭代过程中保证代码应有的功能及效果。在团队协作开发环境下，如果没有测试用例的保障，很容易因为一些改动而破坏其他正常的功能。因此有了测试的保障，开发人员能减少心智负担。但对于测试用例的数量则需要自行斟酌，往往我们没有太多时间来编写完全覆盖的测试用例，但我个人认为至少需要保证主要功能的正确性。</p><p>对于测试这一块，我觉得 <code>Ember</code> 做的还不够好，尤其是在对 UI进行测试时，通常需要通过 <code>Phantom.js</code> 或 <code>Chrome</code> 进行真实渲染和交互。这样的方式拖慢了运行测试所需的时间，一般情况下在我工作的电脑上 一千个左右的测试用例需要运行1-2分钟甚至更长时间。</p><p>这时候 <code>Virtual DOM</code> 的优势就显现出来了，如果通过 <code>Virtual DOM</code> 在内存中实现虚拟渲染及交互，就能极大提高测试运行效率，也会提高开发者编写测试的热情。似乎 <code>enzyme</code> 可以做到这一点？</p><h5 id="文档"><a href="#文档" class="headerlink" title="文档"></a>文档</h5><p>团队的要求是每一个函数及属性均需要编写注释，有了这些注释，API文档自然就水到渠成了。通过内部的工具配合 <code>YUIdoc</code> ，轻松实现了所有项目的API文档。我实习期间的其中一个任务就是改进了内部文档工具并修复注释生成过程中的问题，提高了文档的可用性与易用性。</p><p>而我个人觉得除了API文档，还需要有组件库的文档，包括组件的用法及其渲染效果。样式库的文档，指明公共样式类的用处及用法。如果是一些工具类项目，最好能提供类似于 <code>Guide</code> 这样的文档。在团队中，还可以建立 Wiki 对一些常见知识进行记录和分享，这几个部分我认为团队还有提升的空间。</p><h4 id="良好的架构"><a href="#良好的架构" class="headerlink" title="良好的架构"></a>良好的架构</h4><p>BitTitan 前端的代码量大概在十万这个数量级，有大大小小的若干个 <code>Web平台</code>，而这样数量级的代码固然需要一个能够良好扩展伸缩的架构。有人问我，“前端有架构吗？架构不是后端才有的吗？”，我的回答是前端当然有架构，软件可以没有架构，但代码量和复杂度上去了，在优化和重构过程中，通过不断地改进和抽象也就形成了架构。</p><p>我个人认为 BitTitan 前端的代码架构还是比较出色的。在仓库中，大概有十个左右的独立项目，而我在实习过程中，也曾帮助 Lead 进行过一次代码抽象。由于我们使用 <code>Ember</code> ，其本身就有良好的结构划分，<code>Model</code>, <code>Controller</code>, <code>Adapter</code>, <code>Templates</code>, <code>Addon</code>, <code>Mixins</code>等等都是已经存在的。而我们要做的是通过<code>抽象</code>实现代码复用。</p><ul><li>公共库，例如 Model、Helper、Mixin、Addon、Utils 等；</li><li>组件库，抽取公共组件形成组件库；</li><li>样式库，通过自建CSS类库实现跨项目代码复用;</li><li>应用自身结构的设计，组件划分及设计;</li><li>应用状态的管理，接口的设计等等；</li></ul><p>而每一部分中又存在有自身良好的结构，这样的架构使得代码复用程度很高，减少了重复机械的劳动，提高开发者的工作效率。同时这样的架构也能更好地进行产品迭代和重构。对于架构这一方面，由于我自身的能力有限，也没能很好地总结，但确实此行让我开了眼界。</p><h3 id="组件化"><a href="#组件化" class="headerlink" title="组件化"></a>组件化</h3><p>谈了这么多，我认为前端最重要的还是落实到实际的开发过程中，而我们接触最多的抽象也就是<code>组件化</code>了。通过组件化可以实现 <code>UI复用</code>，整个前端开发流程也变成了搭积木式的，可以互相协作的模式。那么如何进行组件抽象则成了重中之重，一个好的组件抽象可以极大程度上提高开发效率。</p><p>由于我的实习任务没有涉及太多的业务实现，那么我就来谈谈我所看到的一些良好的抽象。</p><h4 id="逻辑抽象-表格"><a href="#逻辑抽象-表格" class="headerlink" title="逻辑抽象 - 表格"></a>逻辑抽象 - 表格</h4><p>表格在企业级Web应用中占有极高地位，在应用中也随处可见，一个好的表格组件则可以贯穿整个应用。表格至少需要能自定义 Header, Row 及每一个 Cell的样式和功能。但这远远还不够，我认为还可以包含一些常用的功能：</p><ul><li>数据分页，通过滚动自动加载数据；</li><li>Filter, Sorting, Search等功能；</li><li>表格的刷新、行的删除等；</li><li>大表格性能优化；</li><li>允许更多的自定义功能。</li></ul><p>这样的组件其实是所谓的 <code>Composition组件</code>，组件本身不提供样式，只负责逻辑的抽象与实现。通过控制子组件来组合出各式各样的组件样式，而数据需要符合Composition组件的接口要求。</p><h4 id="效果抽象-模态框"><a href="#效果抽象-模态框" class="headerlink" title="效果抽象 - 模态框"></a>效果抽象 - 模态框</h4><p>模态和弹出框也是一种常用的UI模式，模态框组件本身不提供组件样式，转而负责实现遮罩，弹出等效果，属于效果层面的复用，当然通过继承的方式，模态框也能负责一部分例如关闭或拖动这样的逻辑实现。而模态框具体的内容和样式则需要由其子组件来决定。</p><h4 id="继承抽象-表单组件"><a href="#继承抽象-表单组件" class="headerlink" title="继承抽象 - 表单组件"></a>继承抽象 - 表单组件</h4><p>表单也是最常见的一种交互形式，那么表单的抽象自然也十分重要。通常表单需要独立定制一些样式，例如输入框，单选与多选框，下拉菜单，按钮等，这些组件需要预留好交互的接口。而表单组件自身作为一种抽象可以包含对每一个 <code>Field</code> 的数据提交、验证、重置等逻辑的实现。通过平时工作我发现，公司的各种表单组件层级结构较为复杂，通常包含了至少两级抽象。例如多选框与下拉菜单可能同时继承自MultiSelect组件，MultiSelect组件则负责多选数据的接口定义与数据绑定，这样通过继承的方式实现了代码复用。</p><p>通过对组件化的灵活使用，我们可以最大限度提高代码复用率和开发效率。因此，在实际开发过程中需要不断思考总结，提炼可以复用的组件，而不能一味地只关注实现。</p><h3 id="国际化"><a href="#国际化" class="headerlink" title="国际化"></a>国际化</h3><p>说起国际化，我在出国实习之前确实也没有太多机会接触到，开发的软件也都只面向中文用户。但 BitTitan 的客户广泛分布在世界各地，因而国际化也是产品必须考虑的要素，那么我来说说他们的国际化是怎么做的。</p><p>国际化有一部分需要在后端进行管理，而前端当然也需要处理这部分逻辑。首先，开发者会在英文的配置文件下编写所需的文本，所有在应用中展示的文本都需要通过调用 <code>i18n</code> 模块进行获取。当开发者把代码 Merge 到仓库之后，后台将会定期运行特定的脚本将英文配置文件传送至第三方翻译服务，之后再<code>Merge</code>至仓库下。而应用则在编译过程中将各种语言配置直接写进代码中并生成不同的<code>Bundle</code>文件。当用户访问应用时，后端将会选择性地调用对应的 <code>Bundle</code> 予以展示，从而实现国际化的功能。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>这一次海外的实习经历让我收获了很多专业相关的知识，文章只做了一个大体的总结，还有很多方面没能涉及到。团队的同事水平都比较高，比如我的 Mentor 非常擅长 CSS，他着手构建了 UIKit CSS Library；而我的 Lead 则拥有良好的计科素养，帮助前端团队进行技术选型，建设的良好的架构，开发各类内部工具，并在工作中给予大家帮助；另一位法国的同事有后端的背景，在 HTTP 及业务逻辑方面非常拿手。而我作为实习生也很好地融入这个团队，与大家一同进步，收获颇丰。</p><p>作为即将正式踏入工作岗位的新人，我认为无论在任何岗位之上，都需要不断思考、学习、交流和总结才能提高水平。作为一名合格的前端工程师，永远都需要有一个工程师该有的态度和视野，不要把自己局限在某一个领域，比如我的实习工作就不完全是前端方面的，可能包括工具的构建、后端的实现、利用编译原理开发自动化工具等等。而随着领域的不断发展，可能将来还会涉及 <code>Node.js</code> 、客户端开发。</p><p>只有扩大了你的视野，才能有更高的创造力，从而实现自我价值。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;刚刚结束实习回国，这两天终于把时差给倒过来了，抓紧趁热把总结写一下。&lt;/p&gt;
&lt;p&gt;我是去年九月份去的美国，在此之前大半年都忙碌于各种简历投递、面试及签证的事情上。在一切安排妥当之后，终于在去年9月初带着对未知的恐惧和向往的心情搭上了赴美的航班。&lt;/p&gt;
&lt;p&gt;我实习公司是
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JSConf 2016参会所见所想</title>
    <link href="http://www.dobest.me/blog/2016/09/06/JSConf%202016%E5%8F%82%E4%BC%9A%E6%89%80%E8%A7%81%E6%89%80%E6%83%B3/"/>
    <id>http://www.dobest.me/blog/2016/09/06/JSConf 2016参会所见所想/</id>
    <published>2016-09-05T16:00:00.000Z</published>
    <updated>2018-03-07T15:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>这是我第一次参加业内的开发者大会，决定利用一点时间回顾并整理参会的一些想法。在网上跟了3年的JSConf视频，我觉得把它称为中国质量最高的JavaScript会议也名副其实。</p><p>本人只讨论个人的一些看法，如果想详细了解大会内容，可以关注官网的视频和Slides，知乎上也有讨论。</p><p><a href="https://www.zhihu.com/question/50244455" target="_blank" rel="noopener">参加 宁JS（JSConf CN 2016）是个什么样的体验？</a></p><p>实不相瞒，早在去年我就有参会的打算，奈何在深圳举办，天南地北实属无奈。所以这次我果断决定参加，早早地买好机票，订好酒店了。</p><a id="more"></a><p>暑假实训加之签证的事情着实把我折腾得筋疲力竭，于是我更加期盼这次的活动，让我放松一把。终于，我等来了九月。</p><p>本次大会在南京绿地洲际酒店举行，不得不称赞大会的格调之高。</p><p><img src="/img/ldzj.jpg" alt=""></p><p>走进大门就看到了JSConf签到的地方。领取资料过后，在志愿者的指引下乘坐扶梯到了七楼的会议大厅。</p><p><img src="/img/jsconf.jpg" alt=""></p><p>此时各大展区早已熙熙攘攘，有在扫描二维码领取奖品的，也有在跟工作人员交谈的。</p><p>由于我对这些展台毫无兴趣，就直奔会场找个位置坐了下来。由于去的不算早，只能坐的比较靠后了。</p><p>好在也才刚要开始 Intro Session，我跟邻座聊了起来。整体上参会的人年龄都不大，让我又有一种置身大学的错觉，实则大部分的人都是已经工作了的，我邻座的朋友也不例外，他在上海的一家创业公司工作，前端开发。可惜的是程序员大都不善言辞，我也没有找到更多的谈资。</p><p><img src="/img/jsconf2.jpg" alt=""></p><p>很快，大会就拉开了序幕。</p><p><img src="/img/jsconf-vue.jpg" alt=""></p><p>首先是Vue.js的作者带来的 The past and the future of Vue.js。虽然现场Vue.js的粉丝不要太多，老实说，我对此并无太大兴趣。整场下来，好似一场粉丝见面会，没有太多的干货。我个人对现代框架的喜好程度：React &gt; Angular &gt; Vue.js &gt;= Ember.js &gt; … 所以这只是我个人的体会。不过话说回来，Vue.js 2.0看上去很不错，虽然Vue的概念很多是借鉴来的，不过它也有所创新。Vue.js的活跃程度在国外也是可圈可点的，这已经是很大的成就了！</p><p><img src="/img/jsconf3.jpg" alt=""></p><p>第二位演讲者是来自 Facebook 的工程师 James，他是 Babel 的核心贡献者，现在是 Flow 项目组的成员。他带来的演讲是 How to build a compiler? 说实话，当初看到这个演讲题目的时候，我是非常有兴趣的。他在现场讲解了一些编译器的基础知识，并使用他的一个开源项目 <a href="https://github.com/thejameskyle/the-super-tiny-compiler" target="_blank" rel="noopener">the-super-tiny-compiler</a> 作为讲解。不过由于我先前已经认真阅读过这个项目的代码，因此这个演讲收获也不大。不过从他的 Slides 就能看出来，作者还是非常用心的，所有的图片都是他亲手画出来的，非常别具一格！编译器这个话题太大，也不是现场三五十分钟能够说清楚的，虽然这不是一门“必修课”，多了解一些知识还是会对日常的开发有很大帮助的。</p><p>《企业级框架EGG》，演讲者声音太小，听着很吃力，从Slides上也没看到太多自己有兴趣的内容，于是就跟邻座聊天去了。</p><p>接着是严清老师的《聊聊JS测试框架》，一上来就讲了JS测试的两个流派：Tape 流和 Mocha 流用法上的一些区别。我和严老师一样都是 Mocha 流。</p><p>然后严老师讲解了 Mocha 流测试框架的原理，主要是通过解析代码构造Context状态机的方式来确定测试的运行流程。总体上讲解很不错，由此我也对测试框架的原理有了一些理解！</p><p>现场还开源了一个GridControl项目，是PM2的作者开发的一个分布式控制的工具。还有3D和VR方面的演讲，视觉类的Talk往往很容易博人眼球，这方面的开发需要有图形学方面专门的积累，门槛不低。</p><p>中途午饭路上看到了图灵的展台，还看到了我前几个月翻译的《React Native开发指南》。</p><p><img src="/img/learning-rn.jpg" alt=""></p><p>午餐不好吃，学校食堂的水平。</p><p><img src="/img/jsconf-lunch.jpg" alt=""></p><p>下午是郭达峰的 <strong>Building a Unified Frontend and Mobile Team</strong>，曾经有朋友介绍，我了解过Strikingly这家公司，他们做的产品是在线自助建站工具，属于重Web前端的产品，极具挑战性。这次他带来的演讲是从他们实际的开发中总结出来的团队组建方面的经验，即打造 Web + Native 全端团队。React Native的问世，敲开了全端新世界的大门，通过React / React Native，Strikingly复用了90%的代码，从他的介绍看来，这种方式带来了诸多好处。同时，达峰也提出了自己对未来客户端开发的一些畅想：客户端开发的统一。总体上我高度认同其说法和做法，这也是我十分看好 React Native 的原因。虽然需要编写一些Java和OC来辅助客户端的开发，但他们通过 TypeScript 的 Interface 保证了多端接口的一致性，这是一个很好的思路！</p><p>从这次大会的另一个焦点 Weex 的受欢迎程度就能看出大家对全端和热情。各大公司也对这方面有一些实践，其中有一个 Lightning Talk 提到了 React Native 在QQ中的实践，其实腾讯在他们家的很多产品中已经嵌入了React Native。下图是官网展示的使用到React Native技术的产品：</p><p><img src="/img/tencent-rn.png" alt=""></p><p>正如达峰所说，他们在使用RN的过程中遇到了很多坑，社区还不够完善，框架也不够成熟和稳定，尽管如此，大家也都在摸索中前进，这种积极的态度和对技术的热情是难能可贵的。</p><p>大会第二天的演讲我个人觉得比较有趣的有，前端 DevOps 实践、Rx.js异步管理、海量React高性能同构实践。</p><p>前端 DevOps 即前端来负责运维的一些工作，工程化、持续集成、自动化部署等内容。平时我对这方面有一些粗浅的了解，Docker、Jenkins，持续集成，其实这些都是软件工程的知识，无论是前端、后端亦或者客户端都应该对这些知识有所了解，这是百利而无一害的事情。</p><p><img src="/img/jsconf-rx.jpg" alt=""></p><p>Rx.js 异步管理，我见到了 Ben Lesh，很早就在网上看过他的演讲，于是在会场一眼就认出了他。他是 Netflix 的高级工程师，Rx.js 项目的 Lead。 Angular2 就使用 Rx.js 作为其异步编程的解决方案，诸如 HTTP 这样的服务就是基于 Rx.js 的。那么Rx.js 是一个什么东西呢？其实也不难理解，Rx 即 ReactiveX，也就是通常所说的 “响应式”，它的核心就是使用 Iterable 迭代器的方式来操作 Observable，将异步操作抽象为集合操作，Rx.js框架本身提供了诸多API来操作Observable，功能很强大。</p><p><img src="/img/jsconf-now.jpg" alt=""></p><p>让我印象较深的还有来自腾讯Now直播的工程师带来的海量高性能 React 优化的演讲。其实演讲的内容与 React 关系不大，不过他们优化的思路很独特。为了尽可能地提高应用的首屏加载速度，提高应用性能，他们对链路进行分析，逐一排查，一步步地进行优化。例如使用 UDP 代替 TCP ，使用 ProtoBuf 代替 JSON 进行数据传输，React同构渲染，非必要的数据的处理，分级缓存等等。讲师的演讲有条不紊，思路清晰，对我有很大的启发！</p><p>还有其他的一些演讲，我没有很深刻的印象，要么讲师本身演讲技巧不足，要么演讲的内容我不感兴趣。</p><p>总体来说，参会的体验不错。不过，希望组委会今后能对讲师和演讲质量进行一下把关，毕竟观众是花钱参会，没有什么营养的话题还是不上为好。</p><p>每个人参会的目的不同，有的为了结识牛人、“网红”，有的为了体验和学习。我则是后者，体验为主，毕竟今后也不一定有机会再参加了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;这是我第一次参加业内的开发者大会，决定利用一点时间回顾并整理参会的一些想法。在网上跟了3年的JSConf视频，我觉得把它称为中国质量最高的JavaScript会议也名副其实。&lt;/p&gt;
&lt;p&gt;本人只讨论个人的一些看法，如果想详细了解大会内容，可以关注官网的视频和Slides，知乎上也有讨论。&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://www.zhihu.com/question/50244455&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;参加 宁JS（JSConf CN 2016）是个什么样的体验？&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;实不相瞒，早在去年我就有参会的打算，奈何在深圳举办，天南地北实属无奈。所以这次我果断决定参加，早早地买好机票，订好酒店了。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React Native NavigationExperimental抢先看（一）</title>
    <link href="http://www.dobest.me/blog/2016/07/01/React%20Native%20NavigationExperimental%E6%8A%A2%E5%85%88%E7%9C%8B%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>http://www.dobest.me/blog/2016/07/01/React Native NavigationExperimental抢先看（一）/</id>
    <published>2016-06-30T16:00:00.000Z</published>
    <updated>2018-03-07T15:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>在文章（二）中我们添加了Redux到应用中，点击阅读（待译），文章（三）实现了Tab与Redux的整合，点击阅读（待译）。</p><a id="more"></a><p>React Native项目已经不再维护<code>Navigator</code>组件而全面转向<code>NavigationExperimental</code>组件了。在本篇文章中，我们将来看看怎样使用全新的API构建一个基础的应用导航。</p><p><a href="https://github.com/dabit3/Navigator-Experimental-example" target="_blank" rel="noopener">点此进入代码仓库</a></p><p><a href="https://rnplay.org/apps/nT-EnA" target="_blank" rel="noopener">在RNPlay在线查看示示例</a></p><p><img src="/img/navigation-experimental-1.gif" alt=""></p><blockquote><p>本篇教程使用0.28.0或更高的版本，旧版本不支持该接口。</p></blockquote><p>首先，我们创建一个新的项目，之后将会在该工程内新建一些组件作为导航切换的示例（<code>Home</code>, <code>About</code>, <code>Contact</code>）。</p><pre class="line-numbers language-bash"><code class="language-bash">react-native init RNExperimental<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着打开项目，我们在<code>index.ios.js</code>或<code>index.android.js</code>文件中创建组件。注意，目前我们只创建了<code>Home</code>组件，先把项目运行起来，暂未实现<code>onPress</code>方法和<code>返回</code>的逻辑。代码如下：</p><pre class="line-numbers language-jsx"><code class="language-jsx"><span class="token keyword">import</span> React<span class="token punctuation">,</span> <span class="token punctuation">{</span> Component <span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react'</span><span class="token comment" spellcheck="true">/* 版本0.25.1之后的React &amp; Component的导入方法*/</span><span class="token keyword">import</span> <span class="token punctuation">{</span>   AppRegistry<span class="token punctuation">,</span>  StyleSheet<span class="token punctuation">,</span>  Text<span class="token punctuation">,</span>  View<span class="token punctuation">,</span>  TouchableHighlight<span class="token punctuation">,</span>  ScrollView<span class="token punctuation">}</span> <span class="token keyword">from</span> <span class="token string">'react-native'</span><span class="token keyword">class</span> <span class="token class-name">RNExperimental</span> <span class="token keyword">extends</span> <span class="token class-name">Component</span> <span class="token punctuation">{</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Home</span> <span class="token punctuation">/></span></span>    <span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token keyword">const</span> Button <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span>title<span class="token punctuation">,</span> onPress<span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>TouchableHighlight</span>     <span class="token attr-name">underlayColor</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>#EFEFEF<span class="token punctuation">'</span></span>    <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>onPress<span class="token punctuation">}</span></span>    <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>button<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span><span class="token punctuation">></span></span><span class="token punctuation">{</span>title<span class="token punctuation">}</span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>TouchableHighlight</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token keyword">const</span> Home <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> onPress <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>title<span class="token punctuation">}</span></span> <span class="token punctuation">></span></span>Hello From Home<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>onPress<span class="token punctuation">}</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>Go</span> <span class="token attr-name">To</span> <span class="token attr-name">Next</span> <span class="token attr-name">Scene'</span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token keyword">const</span> About <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> onPress<span class="token punctuation">,</span> goBack <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>title<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>Hello From About<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>onPress<span class="token punctuation">}</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>Go</span> <span class="token attr-name">To</span> <span class="token attr-name">Next</span> <span class="token attr-name">Scene'</span> <span class="token punctuation">/></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>goBack<span class="token punctuation">}</span></span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>Go</span> <span class="token attr-name">Back'</span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token keyword">const</span> Contact <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">{</span> goBack <span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">(</span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>View</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>container<span class="token punctuation">}</span></span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Text</span> <span class="token attr-name">style</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>styles<span class="token punctuation">.</span>title<span class="token punctuation">}</span></span> <span class="token punctuation">></span></span>Hello From Contact<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>Text</span><span class="token punctuation">></span></span>   <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>Button</span> <span class="token attr-name">title</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">'</span>Go</span> <span class="token attr-name">Back'</span> <span class="token attr-name">onPress</span><span class="token script language-javascript"><span class="token punctuation">=</span><span class="token punctuation">{</span>goBack<span class="token punctuation">}</span></span> <span class="token punctuation">/></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>View</span><span class="token punctuation">></span></span><span class="token punctuation">)</span><span class="token keyword">const</span> styles <span class="token operator">=</span> StyleSheet<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  scrollView<span class="token punctuation">:</span> <span class="token punctuation">{</span>    backgroundColor<span class="token punctuation">:</span> <span class="token string">'#F5FCFF'</span><span class="token punctuation">,</span>    flex<span class="token punctuation">:</span> <span class="token number">1</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  container<span class="token punctuation">:</span> <span class="token punctuation">{</span>    flex<span class="token punctuation">:</span> <span class="token number">1</span><span class="token punctuation">,</span>    backgroundColor<span class="token punctuation">:</span> <span class="token string">'#F5FCFF'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  title<span class="token punctuation">:</span> <span class="token punctuation">{</span>    fontSize<span class="token punctuation">:</span> <span class="token number">40</span><span class="token punctuation">,</span>    marginTop<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>    textAlign<span class="token punctuation">:</span> <span class="token string">'center'</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  button<span class="token punctuation">:</span> <span class="token punctuation">{</span>    height<span class="token punctuation">:</span> <span class="token number">70</span><span class="token punctuation">,</span>    marginTop<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    justifyContent<span class="token punctuation">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>    alignItems<span class="token punctuation">:</span> <span class="token string">'center'</span><span class="token punctuation">,</span>    marginLeft<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    marginRight<span class="token punctuation">:</span> <span class="token number">20</span><span class="token punctuation">,</span>    backgroundColor<span class="token punctuation">:</span> <span class="token string">'#EDEDED'</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span>AppRegistry<span class="token punctuation">.</span><span class="token function">registerComponent</span><span class="token punctuation">(</span><span class="token string">'RNExperimental'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> RNExperimental<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在文章（二）中我们添加了Redux到应用中，点击阅读（待译），文章（三）实现了Tab与Redux的整合，点击阅读（待译）。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Android屏幕直播方案</title>
    <link href="http://www.dobest.me/blog/2016/06/17/Android%E5%B1%8F%E5%B9%95%E7%9B%B4%E6%92%AD%E6%96%B9%E6%A1%88/"/>
    <id>http://www.dobest.me/blog/2016/06/17/Android屏幕直播方案/</id>
    <published>2016-06-16T16:00:00.000Z</published>
    <updated>2018-03-07T15:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>项目需求是实时同步Android手机屏幕画面至浏览器。这里有两个挑战，一是Android如何在应用内获得屏幕实时视频流，另一个是如何在浏览器上做视频直播。经过一番折腾，确定了如下的实现方案。期间，我们也实现了手机摄像头的直播。</p><a id="more"></a><p>演示效果：</p><p><img src="/img/android-live-demo.gif" alt="演示"></p><h1 id="Android获取实时屏幕画面"><a href="#Android获取实时屏幕画面" class="headerlink" title="Android获取实时屏幕画面"></a>Android获取实时屏幕画面</h1><h2 id="原理与基础设置"><a href="#原理与基础设置" class="headerlink" title="原理与基础设置"></a>原理与基础设置</h2><p>Android 5.0版本之后，支持使用<code>MediaProjection</code>的方式获取屏幕视频流。具体的使用方法和原理如下图所示：</p><p><img src="/img/media-projection.png" alt="MediaProjection原理"></p><p>参考<strong>ScreenRecorder项目<sup>3</sup></strong>的实现，我们了解到<code>VirtualDisplay</code>可以获取当前屏幕的视频流，创建<code>VirtualDisplay</code>只需通过<code>MediaProjectionManager</code>获取<code>MediaProjection</code>，然后通过<code>MediaProjection</code>创建<code>VirtualDisplay</code>即可。</p><p>那么视频数据的流向是怎样的呢？</p><ul><li>首先，Display 会将画面投影到 VirtualDisplay中；</li><li>接着，VirtualDisplay 会将图像渲染到 Surface中，而这个Surface是由MediaCodec所创建的；</li><li>最后，用户可以通过MediaCodec获取特定编码的视频流数据。</li></ul><p>经过我们的尝试发现，在这个场景下，MediaCodec只允许使用<strong>video/avc</strong>编码类型，也就是<strong>RAW H.264</strong>的视频编码，使用其他的编码会出现应用Crash的现象（不知是否与硬件有关？）。由于这个视频编码，后面我们与它“搏斗”了好一段时间。</p><p>以下是关键部分的代码（来自<strong>ScreenRecorder项目<sup>3</sup></strong>）：</p><pre class="line-numbers language-java"><code class="language-java">codec <span class="token operator">=</span> MediaCodec<span class="token punctuation">.</span><span class="token function">createEncoderByType</span><span class="token punctuation">(</span>MIME_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>mSurface <span class="token operator">=</span> codec<span class="token punctuation">.</span><span class="token function">createInputSurface</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>mVirtualDisplay <span class="token operator">=</span> mMediaProjection<span class="token punctuation">.</span><span class="token function">createVirtualDisplay</span><span class="token punctuation">(</span>        name<span class="token punctuation">,</span>        mWidth<span class="token punctuation">,</span>        mHeight<span class="token punctuation">,</span>        mDpi<span class="token punctuation">,</span>        DisplayManager<span class="token punctuation">.</span>VIRTUAL_DISPLAY_FLAG_PUBLIC<span class="token punctuation">,</span>        mSurface<span class="token punctuation">,</span>    <span class="token comment" spellcheck="true">// 图像会渲染到Surface中</span>        null<span class="token punctuation">,</span>        null<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在编码之前，我们还需要设置视频编码的一些格式信息，这里我们通过<code>MediaFormat</code>进行编码格式设置，代码如下（来自<strong>ScreenRecorder项目<sup>3</sup></strong>）。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> String MIME_TYPE <span class="token operator">=</span> <span class="token string">"video/avc"</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// H.264编码</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> FRAME_RATE <span class="token operator">=</span> <span class="token number">30</span><span class="token punctuation">;</span>            <span class="token comment" spellcheck="true">// 30 FPS</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> IFRAME_INTERVAL <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>       <span class="token comment" spellcheck="true">// I-frames间隔时间</span><span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> TIMEOUT_US <span class="token operator">=</span> <span class="token number">10000</span><span class="token punctuation">;</span><span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">prepareEncoder</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> IOException <span class="token punctuation">{</span>    MediaFormat format <span class="token operator">=</span> MediaFormat<span class="token punctuation">.</span><span class="token function">createVideoFormat</span><span class="token punctuation">(</span>MIME_TYPE<span class="token punctuation">,</span> mWidth<span class="token punctuation">,</span> mHeight<span class="token punctuation">)</span><span class="token punctuation">;</span>    format<span class="token punctuation">.</span><span class="token function">setInteger</span><span class="token punctuation">(</span>MediaFormat<span class="token punctuation">.</span>KEY_COLOR_FORMAT<span class="token punctuation">,</span>            MediaCodecInfo<span class="token punctuation">.</span>CodecCapabilities<span class="token punctuation">.</span>COLOR_FormatSurface<span class="token punctuation">)</span><span class="token punctuation">;</span>    format<span class="token punctuation">.</span><span class="token function">setInteger</span><span class="token punctuation">(</span>MediaFormat<span class="token punctuation">.</span>KEY_BIT_RATE<span class="token punctuation">,</span> mBitRate<span class="token punctuation">)</span><span class="token punctuation">;</span>    format<span class="token punctuation">.</span><span class="token function">setInteger</span><span class="token punctuation">(</span>MediaFormat<span class="token punctuation">.</span>KEY_FRAME_RATE<span class="token punctuation">,</span> FRAME_RATE<span class="token punctuation">)</span><span class="token punctuation">;</span>    format<span class="token punctuation">.</span><span class="token function">setInteger</span><span class="token punctuation">(</span>MediaFormat<span class="token punctuation">.</span>KEY_I_FRAME_INTERVAL<span class="token punctuation">,</span> IFRAME_INTERVAL<span class="token punctuation">)</span><span class="token punctuation">;</span>    codec <span class="token operator">=</span> MediaCodec<span class="token punctuation">.</span><span class="token function">createEncoderByType</span><span class="token punctuation">(</span>MIME_TYPE<span class="token punctuation">)</span><span class="token punctuation">;</span>    codec<span class="token punctuation">.</span><span class="token function">configure</span><span class="token punctuation">(</span>format<span class="token punctuation">,</span> null<span class="token punctuation">,</span> null<span class="token punctuation">,</span> MediaCodec<span class="token punctuation">.</span>CONFIGURE_FLAG_ENCODE<span class="token punctuation">)</span><span class="token punctuation">;</span>    codec<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据获取"><a href="#数据获取" class="headerlink" title="数据获取"></a>数据获取</h2><p><img src="/img/media-codec.png" alt="MediaCodec"></p><blockquote><p>图片来自Android官方文档</p></blockquote><p>紧接着，我们需要实时获取视频流了，我们可以直接从<code>MediaCodec</code>中获取视频数据。</p><p>根据官方文档，获取视频流有两种做法。一种是通过<strong>异步</strong>的方式获取数据，使用回调来获取<code>OutputBuffer</code>，具体代码详见<a href="https://developer.android.com/reference/android/media/MediaCodec.html" target="_blank" rel="noopener">Android文档</a>。</p><p>这里我们了解一下<strong>同步</strong>获取的方式，由于是同步执行，为了不阻塞主线程，必然需要启动一个新线程来处理。首先，程序会进入一个循环（可以设置变量进行停止），我们通过<code>codec.dequeueOutputBuffer()</code>方法获取到<code>outputBufferId</code>，接着通过ID获取<code>buffer</code>。这个<code>buffer</code>即是我们需要用到的<strong>实时视频帧数据</strong>了。代码如下（来自Android官方文档）：</p><pre class="line-numbers language-java"><code class="language-java"> MediaFormat outputFormat <span class="token operator">=</span> codec<span class="token punctuation">.</span><span class="token function">getOutputFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 方式二</span> codec<span class="token punctuation">.</span><span class="token function">start</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token punctuation">;</span><span class="token punctuation">;</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>   <span class="token keyword">int</span> outputBufferId <span class="token operator">=</span> codec<span class="token punctuation">.</span><span class="token function">dequeueOutputBuffer</span><span class="token punctuation">(</span>mBufferInfo<span class="token punctuation">,</span> <span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token keyword">if</span> <span class="token punctuation">(</span>outputBufferId <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>     ByteBuffer outputBuffer <span class="token operator">=</span> codec<span class="token punctuation">.</span><span class="token function">getOutputBuffer</span><span class="token punctuation">(</span>outputBufferId<span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 方式一</span>     MediaFormat bufferFormat <span class="token operator">=</span> codec<span class="token punctuation">.</span><span class="token function">getOutputFormat</span><span class="token punctuation">(</span>outputBufferId<span class="token punctuation">)</span><span class="token punctuation">;</span>     codec<span class="token punctuation">.</span><span class="token function">releaseOutputBuffer</span><span class="token punctuation">(</span>outputBufferId<span class="token punctuation">,</span> …<span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>outputBufferId <span class="token operator">==</span> MediaCodec<span class="token punctuation">.</span>INFO_OUTPUT_FORMAT_CHANGED<span class="token punctuation">)</span> <span class="token punctuation">{</span>     outputFormat <span class="token operator">=</span> codec<span class="token punctuation">.</span><span class="token function">getOutputFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 方式二</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span> codec<span class="token punctuation">.</span><span class="token function">stop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> codec<span class="token punctuation">.</span><span class="token function">release</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>按照<strong>ScreenRecorder项目<sup>3</sup></strong>的做法，接着他使用<code>MediaMuxer</code>的<code>Muxer.writeSampleData()</code>方法，直接将视频流<code>outputBuffer</code>写入了文件。</p><p>然而，我们需要的是实时推流至服务器。那么，接下去应该如何实现呢？</p><h2 id="视频推流"><a href="#视频推流" class="headerlink" title="视频推流"></a>视频推流</h2><p>这里有一个小插曲，为了完成这个项目，我和同学查阅了不少资料和源码。其中有一个<strong>RtmpRecoder项目<sup>2</sup></strong>使用<code>FFmpeg</code>进行实时摄像头的<code>RTMP</code>推流，推流的原理如下图所示。</p><p><img src="/img/ffmpeg-push.jpg" alt="FFmpeg推流"></p><p><a href="https://ffmpeg.org/" target="_blank" rel="noopener">FFmpeg</a>是一个大名鼎鼎的音视频转码库，它由C语言实现，因此在Java中，我们需要通过JNI进行调用，这里，我们使用了<strong>JavaCV<sup>1</sup></strong>的FFmpeg转码功能。</p><div class="tip"><br>注意：如果使用JavaCV并采用<code>mpeg1video</code>格式推流至服务器，切记将声道调为0，<code>recorder.setAudioChannels(0)</code>，否则视频会残缺不全。<br></div><p>说到这里，不得不吐槽一下<strong>JavaCV<sup>1</sup></strong>，它没有文档，没有文档是件很可怕的事情，编程基本靠猜。而且它也没有实现FFmpeg的全部功能！！！我们为了把获取到的<strong>视频帧</strong>流数据传给JavaCV费了好大功夫，曾经一度想通过调用C语言函数来完成这项工作，但没有成功！</p><p>到最后黔驴技穷，只好去项目中开Issue寻求帮助，然而作者表示尚未实现该功能，WTF。好吧，毕竟开源项目，别人也没有义务去做这件事。所以最后也只能自己来解决这个问题了。</p><p><img src="/img/javacv-issue.png" alt=""></p><p>废话不多说，既然<strong>JavaCV<sup>1</sup></strong>无法完成这项工作，那么我们只好另辟蹊径。</p><p>现在，有两种做法。</p><ul><li>自己编写FFmpeg类库。我尝试直接使用CLI接入stream的方式实现实时推流。方法也很简单，只需要在Java中启动<code>FFmpeg</code>进程，然后pipe输入流，再由<code>FFmpeg</code>推流至服务器。但实践之后发现一些奇怪的问题，只好作罢。</li><li>另一个方案就是徒手来处理<strong>视频帧</strong>数据，将转码的工作放到服务器端去实现，最后我们使用这个方案成功完成了任务。下面来看看H.264编码：</li></ul><h1 id="H-264编码"><a href="#H-264编码" class="headerlink" title="H.264编码"></a>H.264编码</h1><p>众所周知，视频编码格式种类繁多，H.264也是其中一种编码，每一种编码都有其特点和适用场景，更多信息请自行搜索，这里不多做赘述。期间，我们尝试过将上面获取到的<strong>视频帧</strong>数据保存为文件，想研究视频文件为什么会呈现为<strong>绿屏</strong>的画面。经过翻阅资料和试验我们发现，<strong>H.264</strong>编码有着特殊的分层结构。</p><blockquote><p>H.264 的功能分为两层：视频编码层(VCL, Video Coding Layer)和网络提取层(NAL, Network Abstraction Layer)。VCL 数据即编码处理的输出，它表示被压缩编码后的视频数据 序列。在 VCL 数据传输或存储之前,这些编码的 VCL 数据，先被映射或封装进 NAL 单元中。每个 NAL 单元包括一个原始字节序列负荷(RBSP, Raw Byte Sequence Payload)、一组对应于视频编码的 NAL 头信息。RBSP 的基本结构是：在原始编码数据的后面填加了结尾比特。一个bit“1”若干比特“0”，以便字节对齐。</p></blockquote><p><img src="/img/nal.png" alt="NAL"></p><p>因此，为了将帧序列变成合法的H.264编码，我们需要手动构建<strong>NAL单元</strong>。H.264的帧是以<strong>NAL单元</strong>为单位进行封装的，NAL单元的结构如上图所示。H.264分为<code>Annexb</code>和<code>RTP</code>两种格式，<code>RTP</code>格式更适合用于网络传输，因为其结构更加节省空间，但由于Android系统提供的数据本身就是<code>Annexb</code>格式的，因此我们采用<code>Annexb</code>格式进行传输。</p><p>按照<code>Annexb</code>格式的要求，我们需要将数据封装为如下格式：</p><pre><code>0000 0001 + SPS + 0000 0001 + PPS + 0000 0001 + 视频帧（IDR帧）</code></pre><blockquote><p>H.264的SPS和PPS串，包含了初始化H.264解码器所需要的信息参数，包括编码所用的profile，level，图像的宽和高，deblock滤波器等。</p></blockquote><p>然后不断重复以上格式即可输出正确的<strong>H.264</strong>编码的视频流了。这里的SPS和PPS在每一个NAL单元中重复存在，主要是适用于流式传播的场景，设想一下如果流式传播过程中漏掉了开头的SPS和PPS，那么整个视频流将永远无法被正确解码。</p><p>我们在实践过程中，SPS和PPS只传递了一次，这样的方式比较适合我们的项目场景，也比较省流量。因此在我们的方案中，格式变为如下形式：</p><pre><code>0000 0001 + SPS + 0000 0001 + PPS + 0000 0001 + 视频帧（IDR帧）+ 0000 0001 + 视频帧 + ...</code></pre><p>H.264编码比较复杂，我也只是在做项目期间查阅一些资料才有一点大概的了解，然后在项目完成之后才去反思和理解背后的原理。如果要深入学习，可以查阅相关的资料（<strong>H.264视频压缩标准<sup>5</sup></strong>）。</p><p>介绍完<strong>H.264</strong>的基本原理，下面看看Android上具体的实现。其实Android系统的<code>MediaCodec</code>类库已经帮助我们完成了较多的工作，我们只需要在开始录制时（或每一次传输视频帧前）在视频帧之前写入SPS和PPS信息即可。<code>MediaCodec</code>已经默认在数据流（视频帧和SPS、PPS）之前添加了<code>start code</code>(0x01)，我们不需要手动填写。</p><p>SPS和PPS分别对应了<code>bufferFormat</code>中的<code>csd-0</code>和<code>csd-1</code>字段。</p><pre class="line-numbers language-java"><code class="language-java"><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>outputBufferId <span class="token operator">==</span> MediaCodec<span class="token punctuation">.</span>INFO_OUTPUT_FORMAT_CHANGED<span class="token punctuation">)</span> <span class="token punctuation">{</span>    MediaFormat outputFormat <span class="token operator">=</span> codec<span class="token punctuation">.</span><span class="token function">getOutputFormat</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    outputFormat<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token string">"csd-0"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// SPS</span>    outputFormat<span class="token punctuation">.</span><span class="token function">getByteBuffer</span><span class="token punctuation">(</span><span class="token string">"csd-1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// PPS</span>    <span class="token comment" spellcheck="true">/* 然后直接写入传输流 */</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="服务器端"><a href="#服务器端" class="headerlink" title="服务器端"></a>服务器端</h1><p>实时的数据流通过Socket(tcp)传输到服务器端，服务器端采用<code>Node.js</code>实现视频流转码和<code>WebSocket</code>转播。为了使Web前端可以播放实时的视频，我们必须将格式转换为前端支持的视频格式，这里解码使用<code>FFmpeg</code>的Node.js封装（<strong>stream-transcoder项目<sup>6</sup></strong>）。以下是Socket通讯和转码的关键代码：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> Transcoder <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'stream-transcoder'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> net <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'net'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>net<span class="token punctuation">.</span><span class="token function">createServer</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span> <span class="token punctuation">{</span>    sock<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'close'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'CLOSED: '</span> <span class="token operator">+</span>            sock<span class="token punctuation">.</span>remoteAddress <span class="token operator">+</span> <span class="token string">' '</span> <span class="token operator">+</span> sock<span class="token punctuation">.</span>remotePort<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    sock<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'error'</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 转码  H.264 => mpeg1video</span>    <span class="token keyword">new</span> <span class="token class-name">Transcoder</span><span class="token punctuation">(</span>sock<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span>width<span class="token punctuation">,</span> height<span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">fps</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">videoBitrate</span><span class="token punctuation">(</span><span class="token number">500</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">'mpeg1video'</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">channels</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">stream</span><span class="token punctuation">(</span><span class="token punctuation">)</span>      <span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'data'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// WebSocket转播</span>        socketServer<span class="token punctuation">.</span><span class="token function">broadcast</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> <span class="token punctuation">{</span>binary<span class="token punctuation">:</span><span class="token boolean">true</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">listen</span><span class="token punctuation">(</span><span class="token number">9091</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Web直播"><a href="#Web直播" class="headerlink" title="Web直播"></a>Web直播</h1><p>紧接着，Web前端与服务器建立<code>WebSocket</code>连接，使用<strong>jsmpeg项目<sup>7</sup></strong>对mpeg1video的视频流进行解码并呈现在Canvas上。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">WebSocket</span><span class="token punctuation">(</span><span class="token string">'ws://127.0.0.1:9092/'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> canvas <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">'videoCanvas'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> player <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">jsmpeg</span><span class="token punctuation">(</span>client<span class="token punctuation">,</span> <span class="token punctuation">{</span>canvas<span class="token punctuation">:</span>canvas<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>后续还可以做一些灵活的配置以及错误处理，可以让整个直播的流程更加稳定。至于视频方面的优化，也可以继续尝试各种参数的调节等等。</p><p>为了完成这个项目，我和我的另一个同学前后花费了四五天的时间，进行各种摸索和尝试，所以我决定记录下这个方案，希望可以帮助到有需要的人。</p><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><ol><li>参考<a href="https://github.com/bytedeco/javacv" target="_blank" rel="noopener">JavaCV</a>项目</li><li>参考<a href="https://github.com/beautifulSoup/RtmpRecoder" target="_blank" rel="noopener">RtmpRecoder开源项目</a>的实现</li><li>参考<a href="https://github.com/yrom/ScreenRecorder" target="_blank" rel="noopener">ScreenRecorder开源项目</a>的实现</li><li>参考<a href="https://developer.android.com/reference/android/media/MediaCodec.html" target="_blank" rel="noopener">Android文档</a></li><li>文献<a href="http://www.axis.com/files/whitepaper/wp_h264_34203_cn_0901_lo.pdf" target="_blank" rel="noopener">H.264视频压缩标准</a></li><li>使用<a href="https://github.com/trenskow/stream-transcoder.js" target="_blank" rel="noopener">stream-transcoder项目</a></li><li>使用<a href="https://github.com/phoboslab/jsmpeg" target="_blank" rel="noopener">jsmpeg项目</a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;项目需求是实时同步Android手机屏幕画面至浏览器。这里有两个挑战，一是Android如何在应用内获得屏幕实时视频流，另一个是如何在浏览器上做视频直播。经过一番折腾，确定了如下的实现方案。期间，我们也实现了手机摄像头的直播。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>使用React Native一年后的感受</title>
    <link href="http://www.dobest.me/blog/2016/06/12/%E4%BD%BF%E7%94%A8React%20Native%E4%B8%80%E5%B9%B4%E5%90%8E%E7%9A%84%E6%84%9F%E5%8F%97/"/>
    <id>http://www.dobest.me/blog/2016/06/12/使用React Native一年后的感受/</id>
    <published>2016-06-11T16:00:00.000Z</published>
    <updated>2018-03-07T15:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>当我在面试<a href="https://discordapp.com/" target="_blank" rel="noopener">Discord</a>的时候，技术主管Stanislav跟我说：</p><blockquote><p><a href="https://facebook.github.io/react-native/" target="_blank" rel="noopener">React Native</a>代表着未来。等它一发布，我们就会用它从零构建iOS应用。</p></blockquote><p>作为一名原生iOS开发者，基于先前使用PhoneGap的经验，我非常怀疑使用Web技术构建移动应用的这种方式。但是当我学习并使用React Native一段时间之后，我非常庆幸我们做了这个决定。</p><a id="more"></a><h2 id="开发效率"><a href="#开发效率" class="headerlink" title="开发效率"></a>开发效率</h2><p>虽然iOS“团队”只有我自己一个人，但是iOS应用开发依然可以赶上Web和桌面应用开发闪电般的速度。Apple公司已经允许开发者使用<code>JavaScriptCore</code>进行应用的升级，而无需等待App Store的审核流程。这对于那些缺乏专业的iOS QA（质量保障）团队的小公司来说是非常便利的，因为iOS团队可以在发布新功能之后进行热更新。</p><p>使用React Native一年之后，我们的iOS开发周期明显变快了，这得益于很高的开发效率。比如：</p><ul><li><p>基于现有的前端架构，我们在两周之内就发布了V1.0的版本。</p></li><li><p>相比于<code>Auto Layout</code>，基于<a href="https://css-tricks.com/snippets/css/a-guide-to-flexbox/" target="_blank" rel="noopener">Flexbox</a>的样式可以节省一半的代码，并且更容易理解。</p></li><li><p>使用Flux设计模式，iOS和Web应用共享了<code>store</code>和<code>action</code>的98%的代码。</p></li></ul><h2 id="性能"><a href="#性能" class="headerlink" title="性能"></a>性能</h2><p>React Native在后台线程运行JavaScript并发送极小的代码到主线程中。事实证明，React Native相比于Objective-C或Swift编写的原生iOS应用来说有一些性能差异！</p><p><img src="/img/discord-perf.gif" alt=""></p><blockquote><p>Reactiflux小组的性能演示，该组有超过1.1万个会员 —— UI和JS线程大多数都是60FPS</p></blockquote><p>然而，我们当初开始构建iOS应用时发现<strong>聊天滚动视图</strong>的性能并不令人满意，尤其是一些活跃的聊天分组。于是，我们决定使用<a href="http://componentkit.org/" target="_blank" rel="noopener">ComponentKit</a>构建聊天视图并编写必要的桥接代码代替原有的方案。当JS线程在完成一些繁重任务的时候，类库也无法提供原生那样流畅的动画（译注：之前动画是在JS线程执行，<a href="https://github.com/facebook/react-native/commit/19e2388a76a7792ace166b64b9f1fc4695b62f1f" target="_blank" rel="noopener">目前有人提交了一份代码</a>，有望使用原生iOS动画接口），因此我们在抽屉侧滑动画上继续使用<a href="https://github.com/facebook/pop" target="_blank" rel="noopener">PopAnimation</a>。</p><blockquote><p>注： 作者称该应用仅聊天视图和抽屉动画是原生代码实现的，其他均由React Native实现。</p></blockquote><p>当React Native Android版本发布时，我们也尝试在Android设备上运行应用，但遗憾的是，我们遇到了一些性能问题，只好暂时放弃。Android开发主管Miguel是这样说的：</p><div class="tip"><br>很遗憾，不同Android设备的性能差异很大，这点明显落后于iOS。我们可以让应用运行地很快，但是性能——尤其是触摸事件，即使在更高端设备上也不能令人满意。并且在早期，由于React Native Android缺乏完善的功能，我们从产品原型过渡到成品应用比iOS花费了更多时间。<br></div><h2 id="可用性"><a href="#可用性" class="headerlink" title="可用性"></a>可用性</h2><p><img src="/img/discord-usability.png" alt=""></p><p>React Native让开发工作更简洁，使得开发者可以专注于每个新版本核心功能的开发。应用内自带的开发者菜单为我节省了大量的时间。</p><p>其中我最喜欢的一个功能是<code>Show Inspector</code>（审查工具），它可以即时展现交互视图的层级结构以及被选组件中所有必要的样式信息，这无疑是我用过的最棒的iOS审查工具。</p><h2 id="社区"><a href="#社区" class="headerlink" title="社区"></a>社区</h2><p>React Native项目每<strong>两周</strong>会发布一个新版本，其中包含一些新的特性以及修复的bug。这有利有弊，好比iOS几个月的稳定版本的发布，新的代码需要额外的时间进行升级，尤其是生产环境中的应用。因此，这也是到目前为止我们fork的React Native仓库只有四次主要升级的原因。</p><p>由于React Native还不太成熟，资源有限，也不完整。但随着它越来越流行，在不久之后一定能赶上其他成熟的技术。下面列出了一些实用的资源，我也经常在它的仓库上提问和获取最新的信息：</p><ul><li><p>Reactiflux上的<a href="https://discord.gg/0ZcbPKXt5bWVQmld" target="_blank" rel="noopener">#react-native</a>。</p></li><li><p><a href="https://js.coach/react-native" target="_blank" rel="noopener">js.coach</a>—React Native开源组件列表。</p></li><li><p><a href="https://github.com/jondot/awesome-react-native" target="_blank" rel="noopener">awesome-react-native</a>—大量的React Native文章、教程和示例。</p></li></ul><blockquote><p>译注：中文资源：<a href="https://github.com/reactnativecn/react-native-guide" target="_blank" rel="noopener">React Native学习指南</a></p></blockquote><p>总的来说，React Native很有潜力，它把我们团队的移动应用开发带上了一个新的台阶。像我这样原生的iOS开发者可以平滑地过渡到React Native，这有些出乎我的意料。同时，它也帮助我扩展职业技能，因为我也可以很轻松地向React编写的Web应用贡献代码了。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当我在面试&lt;a href=&quot;https://discordapp.com/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Discord&lt;/a&gt;的时候，技术主管Stanislav跟我说：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;a href=&quot;https://facebook.github.io/react-native/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;React Native&lt;/a&gt;代表着未来。等它一发布，我们就会用它从零构建iOS应用。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;作为一名原生iOS开发者，基于先前使用PhoneGap的经验，我非常怀疑使用Web技术构建移动应用的这种方式。但是当我学习并使用React Native一段时间之后，我非常庆幸我们做了这个决定。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>2015年小结</title>
    <link href="http://www.dobest.me/blog/2015/12/31/2015%E5%B9%B4%E5%B0%8F%E7%BB%93/"/>
    <id>http://www.dobest.me/blog/2015/12/31/2015年小结/</id>
    <published>2015-12-30T16:00:00.000Z</published>
    <updated>2018-03-07T15:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>今天是2015年最后一天了，今年也经历了不少的事情，写点文字做个收尾吧。</p><a id="more"></a><h1 id="流水账"><a href="#流水账" class="headerlink" title="流水账"></a>流水账</h1><ul><li><p>2月，年初给常胤师兄投了一份简历，然后开始准备前端的面试。</p></li><li><p>3月，经过几轮面试，拿到了人生中第一份Offer，当时怎么也没想到自己这么快就能去理想中的公司实习。</p></li><li><p>4月，在github整理了一份React Native学习材料，目前快突破3000star大关。由于最近关注React不太多，2016年尽量把更好的资料整理出来。</p></li><li><p>5月，收到一些工作或合作的邀请。</p></li><li><p>6月，图灵图书工作人员找到我，希望能参与React Native书籍编写工作。由于本身缺少实战经验，加上还是个学生，暂时无法胜任，最后商量进行Learng React Native这本书的翻译工作。</p></li><li><p>7月，入职阿里，赶上了RDC团队的outing，在莫干山度了三天假，还被“强制”跳了无节操的草裙舞，不过玩的很开心。</p></li><li><p>8月，实习，工作，学习，认识了一些朋友。我们在杭州的软件设计竞赛拿了全国一等奖。</p></li><li><p>10月，返校读书。负责东北大学官方网站的开发工作。看似非常简单的几个网页，实际开发起来费不少力气。如果做每一件事情，都可以有新的收获，那么它就是值得的。</p></li><li><p>11月，进行社团技术培训。参加了HackShanghai黑客马拉松，连续编程24小时，最后我们团队三个人都跪了，最后拿了一个Top9。还参加饿了么黑客马拉松比赛，有些累，不过很有收获，虽然没有进总决赛，不过值得了！</p></li><li><p>12月，由于李老师离职，书籍翻译的事儿泡汤。于是商量如果有时间的话，来年翻译另一本。然后就是做了一个新简历，不断的海投，已经收到一些公司的拒信了，还做了其中一家公司的OA，最后也是跪。不过这只是一个开始，我相信自己可以的。</p></li></ul><h1 id="技术成长"><a href="#技术成长" class="headerlink" title="技术成长"></a>技术成长</h1><ul><li>可以说2015年是我技术最长进的一年了。</li><li>前端技术更扎实了。不多说了，做好喜爱的事。</li><li>服务端开发，尤其是各种并发模型方面，也有更深刻的理解了。</li><li>简单学习了一下 Android &amp; iOS，感觉跟前端有很多共同点。</li><li>重拾 Java 和 Go，静态类型语言也很有趣。</li><li>开始尝试造轮子，醍醐灌顶。</li><li>Github经营得不错。</li></ul><h1 id="个人成长"><a href="#个人成长" class="headerlink" title="个人成长"></a>个人成长</h1><ul><li>步入职场，体会了很多为人处事方面的道理。</li><li>上台更放松，能较好地给别人做分享。</li><li>渐渐地克服浮躁的心理，认识了非常多优秀的人，自知差距，仍需戒骄戒躁，不断努力，踏实做事。</li></ul><h1 id="展望2016"><a href="#展望2016" class="headerlink" title="展望2016"></a>展望2016</h1><p>2016年，我希望能找到一个理想的公司实习。希望自己能更努力地打好基础，继续提高技术水平，抓住机会，取得进步。2016，要为自己将来的发展做一个决定了，这将又会是一个分岔路口，我应该慎重地做决定。</p><blockquote><p>Anyway, good luck, 2016!</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;今天是2015年最后一天了，今年也经历了不少的事情，写点文字做个收尾吧。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Some thoughts on ele.me hackathon</title>
    <link href="http://www.dobest.me/blog/2015/12/12/Some%20thoughts%20on%20ele.me%20hackathon/"/>
    <id>http://www.dobest.me/blog/2015/12/12/Some thoughts on ele.me hackathon/</id>
    <published>2015-12-11T16:00:00.000Z</published>
    <updated>2018-03-07T15:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<h1 id="What’s-this"><a href="#What’s-this" class="headerlink" title="What’s this?"></a>What’s this?</h1><p>Well, this is my first time to write articles in English. Recently, I attend an activity named Ele.me Hackathon(<a href="http://www.ele.me" target="_blank" rel="noopener">www.ele.me</a> is a company provides campus food take-out service.) with<br>my senior fellow student, he is very well-qualified with techniques who is learning Data Mining as a graduate in NEU. We’re both instered in this kind of contest and then we<br>decide to participate in.</p><a id="more"></a><h1 id="How-it-plays"><a href="#How-it-plays" class="headerlink" title="How it plays?"></a>How it plays?</h1><p>First of all, we read the specification of the activity on their gitlab. What we should do is to develop an high-performance server program according to their requirement by using<br>languages Python, Java or Golang and they provide a small cluster consists of 3 servers and 1 mysql machine and 1 redis machine. The requirement is to implement services such as <code>sign in</code>, <code>sign up</code>, <code>view food</code>, <code>add to cart</code>, <code>place order</code>, <code>view orders</code>, they provides<br><code>Vagrant</code> virtual machine with Redis, Mysql, Runtime and Data installed in it. Obviously, they also provides us with unit tests and benchmark. All we should do is to improve<br>the benchmark score as high as possible in condition of passing all unit tests.</p><p>After discussing, we finally decided to implement it by Java which is high performance and high concurrency. Because of time limited, we chose <code>Jetty</code> to deal with HTTP<br>requests. And then we built up different layers such as Model, Action, Service and Storage. It looks well origanized and pretty nice, but unfortunately, we struggled to pass all the test cases, only to find that we just got about <code>40+</code> per order/s of benchmark in local machine.</p><h1 id="Hardship"><a href="#Hardship" class="headerlink" title="Hardship"></a>Hardship</h1><p>During contest, my teammate Zhi Wang flied to New York for a conference only left me doing the coding.</p><p>I had to think about that <code>why our program&#39;s concurrency is so low?</code>, we know <code>Jetty</code> is also using <code>NIO</code>, but maybe the framework is a bit heavy. Because of my previous hand-on experience of Golang, I finally decided to using golang by following reasons, firstly, I am not familiar with either  Java or Golang because I was devoted to Front-end Techniques before. Moreover, I think go is more clean and simple than Java especially in high-concurrency aspect. So I spent two night coding and finished the first version. Finally, we got <code>80+</code> per order/s concurrency in local machine and got <code>573+</code> per order/s in remote server which makes us be <code>top 20</code>.</p><p>And then we considered that we were in the right directions. we continued to do <code>profiling</code> works, replacing those slow or blocking operations. One thing that I have to mention is <code>Redis</code>, it’s a <code>cache</code> but is not so easy to tackle with. The strategy we use is to store <code>immutable</code> data in memory and <code>mutable</code> data in <code>Redis</code> cache to share the state between three machines. </p><p>However, the way how we define the storage structure in Redis influence a lot. If we use JSON marshal, we can easily store and fetch it, but it will cause some performance loss. If we use <code>hash table</code> or some built-in structures, we will be caught in dealing with storage design. Because of ambition, we finally choose the the latter one solution and use more basic HTTP handler, unfortunately, we didn’t get the expected result.</p><h1 id="Final-Struggle"><a href="#Final-Struggle" class="headerlink" title="Final Struggle"></a>Final Struggle</h1><p>We had tried almost every methods we know to improve it. One day of the last days, Zhi Wang suddenly sent me a link, which is a example of high concurrency server by <code>Redis</code>and built-in <code>Lua</code>. We were all excited, “This must be definitely right solution”. It was just five days left, and we quickly finished <code>Lua</code> script and built it into <code>Golang</code>. When we had done, we found it doesn’t pass the test cases because of <code>data consistency</code>, is there <code>data race</code> happens or something wrong in our code? Redis’s lua runs in serial ways which is not expected to perform in that way. We can’t solve it even in the last day. </p><p>But it just happened intermittently, luckily, we got <code>300+</code> per order/s in local machine which is what we were expected. But because of request failure, we finally couldn’t catch up with top 20. After that, we found the solution we choose was almost the same to the official implementation.</p><h1 id="Introspection"><a href="#Introspection" class="headerlink" title="Introspection"></a>Introspection</h1><p>After contest, we discussed the reason of requests failure. In request handler, we run a <code>goroutine</code> each request, which is quite a lot expense.<br>In concurrent system, we thought,</p><ul><li>We should design a <code>Request Queue</code> to <code>Enqueue</code> each request and <code>Dequeue</code> to process every request later on instead of handling instantly.</li><li><code>Cache</code> will do benefit to system performance, which however we should make some efforts to design.</li><li><code>Consistency</code> is very improtant in distributed system, otherwise we’ll get unexpected error.</li></ul><p>That’s it, althought we didn’t got prize in this contest finally, we learnt a lot about <code>High Concurrency</code> and <code>Distributed System</code>, that’s what we want to do and steep in.</p><p><a href="https://github.com/ele828/eleme-hackathon" target="_blank" rel="noopener">=&gt; Open source code </a></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;What’s-this&quot;&gt;&lt;a href=&quot;#What’s-this&quot; class=&quot;headerlink&quot; title=&quot;What’s this?&quot;&gt;&lt;/a&gt;What’s this?&lt;/h1&gt;&lt;p&gt;Well, this is my first time to write articles in English. Recently, I attend an activity named Ele.me Hackathon(&lt;a href=&quot;http://www.ele.me&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;www.ele.me&lt;/a&gt; is a company provides campus food take-out service.) with&lt;br&gt;my senior fellow student, he is very well-qualified with techniques who is learning Data Mining as a graduate in NEU. We’re both instered in this kind of contest and then we&lt;br&gt;decide to participate in.&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>东大官网开发记录</title>
    <link href="http://www.dobest.me/blog/2015/11/04/%E4%B8%9C%E5%A4%A7%E5%AE%98%E7%BD%91%E5%BC%80%E5%8F%91%E8%AE%B0%E5%BD%95/"/>
    <id>http://www.dobest.me/blog/2015/11/04/东大官网开发记录/</id>
    <published>2015-11-03T16:00:00.000Z</published>
    <updated>2018-03-07T15:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><img src="/img/neu-2.png" alt=""><br>参与 <a href="http://neu.edu.cn" target="_blank" rel="noopener">东北大学官网</a> 的开发工作，记录一下工作完成之后的一些收获。</p><a id="more"></a><h2 id="采用HTML5-CSS3技术"><a href="#采用HTML5-CSS3技术" class="headerlink" title="采用HTML5 + CSS3技术"></a>采用HTML5 + CSS3技术</h2><p>在项目初期，我们考虑到应该提升用户的浏览体验，团队经过调研、分析和讨论后决定采用一种名为“优雅降级”开发方式，即以现代浏览器为开发基准，后期再通过编写shim的方式对低版本浏览器进行兼容。这种做法一来为用户提供了更加良好的视觉和交互体验，二来也保证了广大用户即便使用低版本的浏览器，也能畅通无阻。</p><h2 id="采用sea-js模块加载器方案"><a href="#采用sea-js模块加载器方案" class="headerlink" title="采用sea.js模块加载器方案"></a>采用sea.js模块加载器方案</h2><p>新版的网站采用了模块加载器的方式实现了JavaScript代码的模块化和规范化，弥补了前端代码全局污染的缺陷。该方案同时也为团队开发带来了便捷，提高了底层代码的复用性和业务逻辑的抽象能力。</p><h2 id="屏幕适配良好"><a href="#屏幕适配良好" class="headerlink" title="屏幕适配良好"></a>屏幕适配良好</h2><p>对于屏幕的适配，我们采用css3的media queries功能分别对市面各种常见的屏幕尺寸进行了响应式适配，实现了低分辨率、普通分辨率和高分辨率屏幕的伸缩适应，最大程度满足了用户的浏览体验。对于低版本浏览器，我们同样通过shim的方式对其进行了分辨率适配。</p><h2 id="兼容性强"><a href="#兼容性强" class="headerlink" title="兼容性强"></a>兼容性强</h2><p>官网作为一个对外的信息平台，我们必须保证网页的兼容性。经过团队不断努力，我们实现了市面近乎所有浏览器的兼容性，包括 Chrome, Firefox, Safari, Opera, IE, 360浏览器, 搜狗浏览器，猎豹浏览器等。</p><h2 id="RESTful-API架构模式"><a href="#RESTful-API架构模式" class="headerlink" title="RESTful API架构模式"></a>RESTful API架构模式</h2><p>网站的数据通信采用了近年非常流行的RESTful API架构，代替了旧版的模板与框架结构。这种架构方式降低了系统间的依赖，提高了接口的灵活性和扩展性，同时减少了客户端的请求次数，提高网页加载速度。</p><h2 id="全站静态化方案"><a href="#全站静态化方案" class="headerlink" title="全站静态化方案"></a>全站静态化方案</h2><p>考虑到网站整体的安全性，我们沿用了旧版静态化的方案。这种做法极大地提高了安全性和服务器响应速度，实现更快的浏览器体验，并且也有利于搜索引擎的收录。</p><h2 id="测试覆盖率全"><a href="#测试覆盖率全" class="headerlink" title="测试覆盖率全"></a>测试覆盖率全</h2><p>为了保证网站良好的适配和兼容，我们进行了多次全面的测试。内容包括各类浏览器及其主流版本的兼容性测试，各类尺寸的屏幕响应式测试，组件的加载容错性测试以及代码review等。</p><h2 id="规范化的开发流程"><a href="#规范化的开发流程" class="headerlink" title="规范化的开发流程"></a>规范化的开发流程</h2><p>在开发期间我们进行了结构的设计，前端使用sea.js作为模块加载器，开发过程引入了grunt构建工具，采用sass预处理工具进行css编写，本地使用connect启动开发服务器，grunt-watch进行自动编译，最后使用include-replace工具对代码进行批量打包并同步到远程服务器。整个过程我们统一了开发工具链，降低团队之间协作的成本，提高了开发效率。</p><h2 id="采用git协作开发，代码开源"><a href="#采用git协作开发，代码开源" class="headerlink" title="采用git协作开发，代码开源"></a>采用git协作开发，代码开源</h2><p>此次项目一个亮点即采用了github开源社区进行代码托管，一方面为了团队协作，另一方面也希望有人能参与我们的开发给我们提供良好的建议。</p><p><code>一句话总结：经过这次项目，学到了不少兼容性的知识，有收获！</code></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;/img/neu-2.png&quot; alt=&quot;&quot;&gt;&lt;br&gt;参与 &lt;a href=&quot;http://neu.edu.cn&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;东北大学官网&lt;/a&gt; 的开发工作，记录一下工作完成之后的一些收获。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React Native模块桥接详解</title>
    <link href="http://www.dobest.me/blog/2015/10/16/React%20Native%E6%A8%A1%E5%9D%97%E6%A1%A5%E6%8E%A5%E8%AF%A6%E8%A7%A3/"/>
    <id>http://www.dobest.me/blog/2015/10/16/React Native模块桥接详解/</id>
    <published>2015-10-15T16:00:00.000Z</published>
    <updated>2018-03-07T15:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>在这篇文章中，我假设你已经掌握了React Native的基础知识，并且有兴趣了解JavaScript和本地通信的内部工作原理。</p><a id="more"></a><h2 id="主线程"><a href="#主线程" class="headerlink" title="主线程"></a>主线程</h2><p>在开始之前，我们首先要知道React Native中的<strong>3个重要的线程</strong>:</p><ul><li><code>Shadow Queue</code>: 负责布局的控制</li><li><code>Main Thread</code>: UIKit运行的线程</li><li><code>JavaScript Thread</code>: JS代码在该线程运行</li></ul><p>此外，如果没有特殊说明，每一个单独的本地模块都有自己的GCD队列。</p><blockquote><p>注：<code>Shadow Queue</code>顾名思义，实际上是一个GCD队列而不是一个线程。</p></blockquote><h2 id="本地模块"><a href="#本地模块" class="headerlink" title="本地模块"></a>本地模块</h2><p>如果你还不知道如何创建一个本地模块，我推荐你可以先看看<a href="http://facebook.github.io/react-native/docs/native-modules-ios.html#content" target="_blank" rel="noopener">官方文档</a>。</p><p>下面是一个<strong>Person</strong>模块，实现了JS调用本地模块的交互过程。</p><pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token keyword">@interface</span> Person <span class="token punctuation">:</span> NSObject <span class="token operator">&lt;</span>RCTBridgeModule<span class="token operator">></span><span class="token keyword">@end</span><span class="token keyword">@implementation</span> Logger<span class="token function">RCT_EXPORT_MODULE</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token function">RCT_EXPORT_METHOD</span><span class="token punctuation">(</span>greet<span class="token punctuation">:</span><span class="token punctuation">(</span>NSString <span class="token operator">*</span><span class="token punctuation">)</span>name<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token function">NSLog</span><span class="token punctuation">(</span><span class="token string">@"Hi, %@!"</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">[</span>_bridge<span class="token punctuation">.</span>eventDispatcher sendAppEventWithName<span class="token punctuation">:</span><span class="token string">@"greeted"</span>                                           body<span class="token punctuation">:</span><span class="token operator">@</span><span class="token punctuation">{</span> <span class="token string">@"name"</span><span class="token punctuation">:</span> name <span class="token punctuation">}</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">@end</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们主要来看看<code>RCT_EXPORT_MODULE</code>和<code>RCT_EXPORT_METHOD</code>这两个宏的实现，了解它们所扮演的角色以及内部是如何工作的。</p><h3 id="RCT-EXPORT-MODULE-js-name"><a href="#RCT-EXPORT-MODULE-js-name" class="headerlink" title="RCT_EXPORT_MODULE([js_name])"></a>RCT_EXPORT_MODULE([js_name])</h3><p>顾名思义，这个宏会导出你的模块，但在特定的环境中，<code>导出</code>的具体含义是什么？这里的意思是把你的模块暴露给React中的<code>Bridge</code>。<br>它的实现也相当简单：</p><pre class="line-numbers language-objectivec"><code class="language-objectivec"> <span class="token macro property">#<span class="token directive keyword">define</span> RCT_EXPORT_MODULE(js_name) \</span>  RCT_EXTERN <span class="token keyword">void</span> <span class="token function">RCTRegisterModule</span><span class="token punctuation">(</span>Class<span class="token punctuation">)</span><span class="token punctuation">;</span> \  <span class="token operator">+</span> <span class="token punctuation">(</span>NSString \<span class="token operator">*</span><span class="token punctuation">)</span>moduleName <span class="token punctuation">{</span> <span class="token keyword">return</span> <span class="token operator">@</span>#js_name<span class="token punctuation">;</span> <span class="token punctuation">}</span> \  <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span>load <span class="token punctuation">{</span> <span class="token function">RCTRegisterModule</span><span class="token punctuation">(</span><span class="token keyword">self</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码做了哪些事情？</p><ul><li><p>它首先声明<code>RCTRegisterModule</code>extern`(外部)函数。意味着这个函数的实现对于编译器是不可见的，但在链接时可见。</p></li><li><p>声明一个<code>moduleName</code>方法，该方法返回宏的可选参数<code>js_name</code>。这样，你就可以让你的模块在JS中有一个区别与Objective-C类名的名称。</p></li><li><p>声明一个<code>load</code>方法(当app被加载到内存之后，它会调用所有类的load方法)，该方法调用上面声明的<code>RCTRegisterModule</code>函数，让<code>bridge</code>知道这个模块。</p></li></ul><h3 id="RCT-EXPORT-METHOD-method"><a href="#RCT-EXPORT-METHOD-method" class="headerlink" title="RCT_EXPORT_METHOD(method)"></a>RCT_EXPORT_METHOD(method)</h3><p>这个宏更有意思，实际上他没有给你的方法添加任何东西，而是额外创建了一个新的方法。</p><p>这个新的方法看起来像下面的例子一样：</p><pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token operator">+</span> <span class="token punctuation">(</span>NSArray <span class="token operator">*</span><span class="token punctuation">)</span>__rct_export__120<span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token operator">@</span><span class="token punctuation">[</span> <span class="token string">@""</span><span class="token punctuation">,</span> <span class="token string">@"log:(NSString *)message"</span> <span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>“这是什么玩意儿？”，你一定有这样的想法。</p></blockquote><p>实际上，它是由前缀(<strong>rct_export</strong>)，一个可选的<code>js_name</code>(这里为空)和函数定义的行号(这里是12)还有一个__COUNTER__(累加器)的宏拼接而成的。</p><p>这个方法唯一的目的就是返回一个包含<code>js_name</code>和方法签名的字符串数组。在名字上的处理是为了避免冲突。</p><blockquote><p>注：如果你使用Category，这里依然可能存在两个同名的方法，虽然Xcode会有警告，但仍然会表现出异常。</p></blockquote><h2 id="运行时"><a href="#运行时" class="headerlink" title="运行时"></a>运行时</h2><p>整个组装过程提供了信息给<code>bridge</code>，所以它可以找到任何已经导出的模块和方法。但是这个过程发生在加载期间，下面我们看看在运行期它是如何被使用的。</p><p>桥接初始化的依赖图：<br><img src="http://tadeuzagallo.com/blog/assets/img/initialisation.svg" alt="inheritants"></p><h3 id="初始化模块"><a href="#初始化模块" class="headerlink" title="初始化模块"></a>初始化模块</h3><p><code>RCTRegisterModule</code>方法所做的事情就是把类添加到一个数组中，后面如果创建新的<code>bridge</code>实例，就可以直接找到这个类了。下面，程序遍历模块数组并为每一个模块创建实例对象，然后把<code>bridge</code>的引用赋值给模块，再把对象引用储存到<code>bridge</code>中（实现相互调用），最后检查模块是否有指定运行的队列，如果没有则为其创建一个新的队列，从其他模块中隔离开来。</p><pre class="line-numbers language-objectivec"><code class="language-objectivec">NSMutableDictionary <span class="token operator">*</span>modulesByName<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// = ...</span><span class="token keyword">for</span> <span class="token punctuation">(</span>Class moduleClass <span class="token keyword">in</span> <span class="token function">RCTGetModuleClasses</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// ...</span>  module <span class="token operator">=</span> <span class="token punctuation">[</span>moduleClass new<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>module respondsToSelector<span class="token punctuation">:</span><span class="token keyword">@selector</span><span class="token punctuation">(</span>setBridge<span class="token punctuation">:</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    module<span class="token punctuation">.</span>bridge <span class="token operator">=</span> <span class="token keyword">self</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span>  modulesByName<span class="token punctuation">[</span>moduleName<span class="token punctuation">]</span> <span class="token operator">=</span> module<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">// ...</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="配置模块"><a href="#配置模块" class="headerlink" title="配置模块"></a>配置模块</h3><p>一旦我们在后台线程运行了模块，就可以列出并且调用该模块的所有以<code>__rct_export__</code>开头的方法，也可以得到方法签名的字符串表示。这是非常重要的，这样一来，我们就知道了参数实际的类型。比如，在运行时我们只能知道参数的名称是<code>id</code>,但通过这种方式就可以知道参数的类型是<code>NSString *</code>了。</p><pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token keyword">unsigned</span> <span class="token keyword">int</span> methodCount<span class="token punctuation">;</span>Method <span class="token operator">*</span>methods <span class="token operator">=</span> <span class="token function">class_copyMethodList</span><span class="token punctuation">(</span>moduleClass<span class="token punctuation">,</span> <span class="token operator">&amp;</span>methodCount<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> methodCount<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  Method method <span class="token operator">=</span> methods<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>  SEL selector <span class="token operator">=</span> <span class="token function">method_getName</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token function">NSStringFromSelector</span><span class="token punctuation">(</span>selector<span class="token punctuation">)</span> hasPrefix<span class="token punctuation">:</span><span class="token string">@"__rct_export__"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    IMP imp <span class="token operator">=</span> <span class="token function">method_getImplementation</span><span class="token punctuation">(</span>method<span class="token punctuation">)</span><span class="token punctuation">;</span>    NSArray <span class="token operator">*</span>entries <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>NSArray <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> SEL<span class="token punctuation">)</span><span class="token punctuation">)</span>imp<span class="token punctuation">)</span><span class="token punctuation">(</span>_moduleClass<span class="token punctuation">,</span> selector<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">//...</span>    <span class="token punctuation">[</span>moduleMethods addObject<span class="token punctuation">:</span><span class="token comment" spellcheck="true">/* Object representing the method */</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="安装JavaScript-Executor"><a href="#安装JavaScript-Executor" class="headerlink" title="安装JavaScript Executor"></a>安装JavaScript Executor</h3><p><code>JavaScript Executors</code>有一个<code>-setUp</code>方法，允许其来做一些昂贵的工作，例如在后台线程初始化一个<code>JavaScriptCore</code>。同时，它也省去了一些不必要的工作，比如，只有激活状态下的<code>executor</code>才会收到<code>setUp</code>的调用指令，而不是所有的<code>excutor</code>都会收到指令。</p><pre class="line-numbers language-objectivec"><code class="language-objectivec">JSGlobalContextRef ctx <span class="token operator">=</span> <span class="token function">JSGlobalContextCreate</span><span class="token punctuation">(</span><span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span>_context <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span>RCTJavaScriptContext alloc<span class="token punctuation">]</span> initWithJSContext<span class="token punctuation">:</span>ctx<span class="token punctuation">]</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h3 id="注入JSON配置"><a href="#注入JSON配置" class="headerlink" title="注入JSON配置"></a>注入JSON配置</h3><p>JSON配置仅仅包含自己模块的信息，如下：</p><pre class="line-numbers language-json"><code class="language-json"><span class="token punctuation">{</span>  <span class="token property">"remoteModuleConfig"</span><span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"Logger"</span><span class="token operator">:</span> <span class="token punctuation">{</span>      <span class="token property">"constants"</span><span class="token operator">:</span> <span class="token punctuation">{</span> /* If we had exported constants... */ <span class="token punctuation">}</span><span class="token punctuation">,</span>      <span class="token property">"moduleID"</span><span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span>      <span class="token property">"methods"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        <span class="token property">"requestPermissions"</span><span class="token operator">:</span> <span class="token punctuation">{</span>          <span class="token property">"type"</span><span class="token operator">:</span> <span class="token string">"remote"</span><span class="token punctuation">,</span>          <span class="token property">"methodID"</span><span class="token operator">:</span> <span class="token number">1</span>        <span class="token punctuation">}</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个信息被作为全局变量储存在JavaScript虚拟机中，所以JS这边的<code>bridge</code>一被初始化就可以使用这些信息去创建模块。</p><h3 id="加载JavaScript代码"><a href="#加载JavaScript代码" class="headerlink" title="加载JavaScript代码"></a>加载JavaScript代码</h3><p>这个过程很直观，就是从指定的地方载入源码。通常，在开发期间从<code>packager</code>下载导入，在生产环境下，直接从从本地存储加载。</p><h3 id="执行JavaScript代码"><a href="#执行JavaScript代码" class="headerlink" title="执行JavaScript代码"></a>执行JavaScript代码</h3><p>一切准备就绪，程序就可以加载JavaScriptCore虚拟机中的应用源码，拷贝、解析、执行代码。首次执行需要注册所有CommanJS模块，指明入口文件。</p><pre class="line-numbers language-objectivec"><code class="language-objectivec">JSValueRef jsError <span class="token operator">=</span> <span class="token constant">NULL</span><span class="token punctuation">;</span>JSStringRef execJSString <span class="token operator">=</span> <span class="token function">JSStringCreateWithCFString</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__bridge      CFStringRef<span class="token punctuation">)</span>script<span class="token punctuation">)</span><span class="token punctuation">;</span>JSStringRef jsURL <span class="token operator">=</span> <span class="token function">JSStringCreateWithCFString</span><span class="token punctuation">(</span><span class="token punctuation">(</span>__bridge      CFStringRef<span class="token punctuation">)</span>sourceURL<span class="token punctuation">.</span>absoluteString<span class="token punctuation">)</span><span class="token punctuation">;</span>JSValueRef result <span class="token operator">=</span> <span class="token function">JSEvaluateScript</span><span class="token punctuation">(</span>strongSelf<span class="token operator">-></span>_context<span class="token punctuation">.</span>ctx<span class="token punctuation">,</span>    execJSString<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> jsURL<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>jsError<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">JSStringRelease</span><span class="token punctuation">(</span>jsURL<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">JSStringRelease</span><span class="token punctuation">(</span>execJSString<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="JavaScript模块"><a href="#JavaScript模块" class="headerlink" title="JavaScript模块"></a>JavaScript模块</h2><p>模块从JSON配置中生成，在JavaScript中通过<code>NativeModules</code>对象进行使用。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> <span class="token punctuation">{</span> NativeModules <span class="token punctuation">}</span> <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'react-native'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> <span class="token punctuation">{</span> Person <span class="token punctuation">}</span> <span class="token operator">=</span> NativeModules<span class="token punctuation">;</span>Person<span class="token punctuation">.</span><span class="token function">greet</span><span class="token punctuation">(</span><span class="token string">'Tadeu'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这种工作方式的流程是，当你调用一个方法，请求会被推进一个队列中，它包含了模块名称、方法名称和所有调用所需的参数。在JavaScript执行之后，该队列会被传回到本地去执行请求。</p><h2 id="调用周期"><a href="#调用周期" class="headerlink" title="调用周期"></a>调用周期</h2><p>如果我们用上面的代码去调用一个模块，它的流程如下：<br><img src="http://tadeuzagallo.com/blog/assets/img/graph.svg" alt="inheritants"></p><p>调用从本地模块到JS。在执行期间，当调用<code>NativeModules</code>上的方法时，程序把将会在本地执行的调用加入队列中。JS执行结束后，本地程序会遍历并运行队列中的调用请求，回调和调用结果(使用<code>_bridge</code>实例可以通过本地模块去调用<code>enqueueJSCall:args:</code>)最终会通过<code>bridge</code>传回给JS。</p><blockquote><p>上图仅表示了JavaScript执行中期的流程</p></blockquote><p>注：如果你关注过该项目，曾经有一个本地到JS的调用队列，它会被指派到每一个vSYNC，但为了加快启动的速度已经将这个功能移除。</p><h2 id="参数类型"><a href="#参数类型" class="headerlink" title="参数类型"></a>参数类型</h2><p>从本地到JS的调用是比较容易的，参数被传入一个<code>NSArray</code>然后转换成JSON。但对于来自JS的调用，需要本地类型，为此，我们显式地检查初始类型(ints, floats, chars等等)。但是正如之前所说，对于对象和结构体，运行时没有从<code>NSMethodSignature</code>中给我们提供足够的信息，所以我们把类型保存为字符串。</p><p>我们使用正则表达式从方法签名中提取类型，实际中还使用<code>RCTConvert</code>工具类去转换对象，对于每个支持的类型它都有一个默认的方法，尝试把<code>JSON</code>输入转换为所需的类型。</p><p>除了结构体以外，我们使用<code>objc_msgSend</code>去动态地调用方法，因为在arm64上没有<code>objc_msgSend_stret</code>对应的版本，我们退回到<code>NSInvocation</code>。</p><p>一旦我们转换了所有的参数，我们使用另一个<code>NSInvocation</code>带着参数去调用目标模块和方法。</p><p>下面是一个例子：</p><pre class="line-numbers language-objectivec"><code class="language-objectivec"><span class="token comment" spellcheck="true">// If you had the following method in a given module, e.g. `MyModule`</span><span class="token function">RCT_EXPORT_METHOD</span><span class="token punctuation">(</span>methodWithArray<span class="token punctuation">:</span><span class="token punctuation">(</span>NSArray <span class="token operator">*</span><span class="token punctuation">)</span> size<span class="token punctuation">:</span><span class="token punctuation">(</span>CGRect<span class="token punctuation">)</span>size<span class="token punctuation">)</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">// And called it from JS, like:</span><span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'NativeModules'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>MyModule<span class="token punctuation">.</span><span class="token function">method</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">{</span>  x<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  y<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>  width<span class="token punctuation">:</span> <span class="token number">200</span><span class="token punctuation">,</span>  height<span class="token punctuation">:</span> <span class="token number">100</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// The JS queue sent to native would then look like the following:</span><span class="token comment" spellcheck="true">// ** Remember that it's a queue of calls, so all the fields are arrays **</span><span class="token operator">@</span><span class="token punctuation">[</span>  <span class="token operator">@</span><span class="token punctuation">[</span> <span class="token operator">@</span><span class="token number">0</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// module IDs</span>  <span class="token operator">@</span><span class="token punctuation">[</span> <span class="token operator">@</span><span class="token number">1</span> <span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">// method IDs</span>  <span class="token operator">@</span><span class="token punctuation">[</span>       <span class="token comment" spellcheck="true">// arguments</span>    <span class="token operator">@</span><span class="token punctuation">[</span>      <span class="token operator">@</span><span class="token punctuation">[</span><span class="token string">@"a"</span><span class="token punctuation">,</span> <span class="token operator">@</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token operator">@</span><span class="token punctuation">{</span> <span class="token string">@"x"</span><span class="token punctuation">:</span> <span class="token operator">@</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">@"y"</span><span class="token punctuation">:</span> <span class="token operator">@</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token string">@"width"</span><span class="token punctuation">:</span> <span class="token operator">@</span><span class="token number">200</span><span class="token punctuation">,</span> <span class="token string">@"height"</span><span class="token punctuation">:</span> <span class="token operator">@</span><span class="token number">100</span> <span class="token punctuation">}</span>    <span class="token punctuation">]</span>  <span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// This would convert into the following calls (pseudo code)</span>NSInvocation callcall<span class="token punctuation">[</span>args<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GetModuleForId</span><span class="token punctuation">(</span><span class="token operator">@</span><span class="token number">0</span><span class="token punctuation">)</span>call<span class="token punctuation">[</span>args<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">GetMethodForId</span><span class="token punctuation">(</span><span class="token operator">@</span><span class="token number">1</span><span class="token punctuation">)</span>call<span class="token punctuation">[</span>args<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">obj_msgSend</span><span class="token punctuation">(</span>RCTConvert<span class="token punctuation">,</span> NSArray<span class="token punctuation">,</span> <span class="token operator">@</span><span class="token punctuation">[</span><span class="token string">@"a"</span><span class="token punctuation">,</span> <span class="token operator">@</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>call<span class="token punctuation">[</span>args<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">NSInvocation</span><span class="token punctuation">(</span>RCTConvert<span class="token punctuation">,</span> CGRect<span class="token punctuation">,</span> <span class="token operator">@</span><span class="token punctuation">{</span> <span class="token string">@"x"</span><span class="token punctuation">:</span> <span class="token operator">@</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>正如上面提到的，每个模块默认都会有自己的GCD队列，除非通过实现<code>-methodQueue</code>方法或跟一个有效的队列合成<code>methodQueue</code>属性来指定了特定的运行队列。<code>View Manager</code>(继承自RCTViewManager)是一个特例，它默认使用<code>Shadow Queue</code>。<code>RCTJSThread</code>也比较特殊，它仅仅是为了占位，因为它是一个线程而不是队列。</p><ul><li><code>View Manager</code>不是真正的特例，因为它的基类显式地指定了<code>shadow queue</code>作为目标队列。</li></ul><p>当前线程的规则如下：</p><ul><li><code>-init</code>和<code>-setBridge</code>是为了保证在主线程中被调用。</li><li>所有导出的模块都保证在在目标队列中被调用。</li><li>如果你实现了<code>RCTInvalidating</code>协议，<strong>invalidate</strong>同样保证在目标队列中被调用。</li><li>不保证<code>-dealloc</code>将会在哪个线程被调用。</li></ul><p>如果从JS有批量的调用请求，请求将会被目标队列分组，并行地被调度。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// group `calls` by `queue` in `buckets`</span><span class="token keyword">for</span> <span class="token punctuation">(</span>id queue <span class="token keyword">in</span> buckets<span class="token punctuation">)</span> <span class="token punctuation">{</span>  dispatch_block_t block <span class="token operator">=</span> <span class="token operator">^</span><span class="token punctuation">{</span>    NSOrderedSet <span class="token operator">*</span>calls <span class="token operator">=</span> <span class="token punctuation">[</span>buckets objectForKey<span class="token punctuation">:</span>queue<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>NSNumber <span class="token operator">*</span>indexObj <span class="token keyword">in</span> calls<span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token comment" spellcheck="true">// Actually call</span>    <span class="token punctuation">}</span>  <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span>queue <span class="token operator">==</span> RCTJSThread<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token punctuation">[</span>_javaScriptExecutor executeBlockOnJavaScriptQueue<span class="token punctuation">:</span>block<span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>queue<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token function">dispatch_async</span><span class="token punctuation">(</span>queue<span class="token punctuation">,</span> block<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h2><p>以上就是稍加深入地对<code>bridge</code>的工作原理进行了介绍，我希望能对那些想开发更加复杂的模块和想为核心框架贡献代码的人能有所帮助。</p><p>本文翻译自 <a href="http://tadeuzagallo.com/blog/react-native-bridge/" target="_blank" rel="noopener">http://tadeuzagallo.com/blog/react-native-bridge/</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在这篇文章中，我假设你已经掌握了React Native的基础知识，并且有兴趣了解JavaScript和本地通信的内部工作原理。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>一点感悟</title>
    <link href="http://www.dobest.me/blog/2015/10/09/%E4%B8%80%E7%82%B9%E6%84%9F%E6%82%9F/"/>
    <id>http://www.dobest.me/blog/2015/10/09/一点感悟/</id>
    <published>2015-10-08T16:00:00.000Z</published>
    <updated>2018-03-07T15:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>最近从公司离职返校，好多人过来问我实习情况，一些人是因为好奇，另一些人希望我分享经验。这段时间确实有一些收获，由于没有总结只好搪塞。早上正好有空，好好梳理一下并展望和规划一下今后的发展，与君共勉。</p><a id="more"></a><h2 id="写在开头"><a href="#写在开头" class="headerlink" title="写在开头"></a>写在开头</h2><p>曾经我也抱着去阿里走一趟，能让自己成为大牛的想法，但实习完之后，老实说这方面的提高没有达到自己的预期。原因可能是公司使用技术会选择一种适合自己业务场景的方案，这种方案并不一定是最新，性能最好的，而是如何能快速开发和迭代，运行是否稳定，如何能适合更多人参与其中，降低这方面的学习成本。不可否认的是，团队里有很多技术非常牛的人，甚至还有前端界名人，他们都非常的谦虚，会耐心的跟你讨论技术。但是，我发现他们并不以自己技术有多牛为资本，职场讲究的远不止这一点。公司一般分为业务开发和基础架构两种，像国内的绝大多数公司还是以业务开发为重点（至少前端是这样），公司要能看到你的业绩，业务能最容易也最直观地体现你的业绩。所以有很多人，需要在工作之余额外抽出时间来进行基础架构的建设，实属不易。所以，作为一名程序员，技术是基础保障，但绝不是全部。不断提升技术的同时，我觉得更应该去全面发展自己，这可能会成为不少技术宅的阻碍。</p><p>下面讲讲技术之外的一些收获：）</p><h2 id="学会总结"><a href="#学会总结" class="headerlink" title="学会总结"></a>学会总结</h2><p>在公司，我们每周都需要向团队或者部门每个人发送自己的周报。由于工作的分散性，周报成了领导和其他人了解你工作最直接的方式。如果主管不能更好的了解你的工作，可能会影响到你的业绩考核。再者，让别人更好的了解你，是别人认可你的基础。在公司工作，不再是自己小打小闹，更多时候需要跟很多人一起合作。就前端来说，通常需要跟PM、产品、设计、交互、后端、测试打交道。总结自己不仅可以促进跟伙伴的合作，也能理清自己的思路。有时候，一个人手上同时并行若干个项目，如果不加以协调安排，往往工作的效率就会很低。另外，我们还可以把平时遇到的技术问题加以总结。</p><h2 id="书面化表达"><a href="#书面化表达" class="headerlink" title="书面化表达"></a>书面化表达</h2><p>我看过很多招聘，都优先考虑有自己的技术博客的人。这并不是没有道理的，听懂一件事，深入理解一件事，和用文字表述出来是三种不同的境界和能力。</p><p>在大公司里，毫不夸张的说，能人异士实在太多。怎么样让你从中脱颖而出则成为成功的关键。作为一个PM，你需要通过文字来汇报项目的进度。作为PD，你需要用文字去感染别人去关注你的产品。作为一个技术人员，你要通过文字来分享一些技术的积累，还要编写技术文档，一个好的文档能让推广你的技术方案事半功倍。一旦你的技术被别人所采用，那么别人认可你是迟早的事情。</p><h2 id="谈话技巧"><a href="#谈话技巧" class="headerlink" title="谈话技巧"></a>谈话技巧</h2><p>留心观察就会发现，公司里的很多人都很有口才。也许是这样一个工作氛围锻炼出来的。这个情况主要表现在，第一，能够清晰的表述自己的观点。第二，能够说服别人接受你的观点。第三，能够较好的组织语言，安排好表述的次序，先说什么再说什么最后说什么，让别人很容易的理解你表述的内容。这些技巧也不是一蹴而就的，需要在平时说话过程中多加思考，谨言慎行。谈话技巧这个话题太大，三言两语很难说全面。不过很重要的一点是，说话需要分场合，如果是正式的场合，尽量要使用陈述的语气去表明一个事实，表达自己的诉求，最好能够加上一些合理的解决方案等等。而不能带着自己的主观想法批判的去说明一件事。</p><p>争取多参加一些分享，在台上分享可以更好的展示你的能力和魅力。同时，做一次分享你的收获远比观众来的更多。</p><p>当然，在平时工作中也不需要过分的严肃，在基本礼仪的基础之上，如果能有一些诙谐那就更哗众取宠了。不过这大都跟性格有一定关系，倒不必强求。</p><h2 id="学会主动"><a href="#学会主动" class="headerlink" title="学会主动"></a>学会主动</h2><p>每个人都想加薪升职，但需求有限，并不是所有人都可以如愿以偿。如果无法学会怎样去主导一个项目，那可能需要做很长时间的螺丝钉。在公司，从表面上看可能大家都差不多，但如果看级别，每个人都参差不齐。那么如何学会主导？我觉得需要在平时工作中多加思考，积极的提出自己的想法，给团队提供合理的建议。不要只会听，只会做，更要有主见。哪怕是领导的想法，也可能存在一些纰漏，我们可以进行更深入的考虑，并及时的提出自己的看法。</p><p>作为一个有主导能力的人，往往还需要一定的管理能力，需要能够合理的安排任务，协调工作进度，解决问题并进行决策。</p><p>久而久之，你就会形成爱思考的习惯，能常常积极主动的在团队发言。用不了多久，别人就会对你刮目相看，觉得你是个靠谱的人，可以胜任一些重要的工作。这样一来，升职加薪就可以提上议程了。</p><h2 id="最后说两句"><a href="#最后说两句" class="headerlink" title="最后说两句"></a>最后说两句</h2><p>不论在学校还是职场，都需要不断地去学习，留心观察，取长补短。所以在今后的日子，我也需要不断的去丰富和提高自己。技术依然不会放松，因为这是我最热爱做的事情，但绝不能一心只做技术，个人的能力更需要注重。提高你的技术，奉献你的热情，展现你的能力，这也是师兄对我的期待，共勉！</p><p>以上。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;最近从公司离职返校，好多人过来问我实习情况，一些人是因为好奇，另一些人希望我分享经验。这段时间确实有一些收获，由于没有总结只好搪塞。早上正好有空，好好梳理一下并展望和规划一下今后的发展，与君共勉。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>阿里巴巴前端开发实习总结</title>
    <link href="http://www.dobest.me/blog/2015/09/25/%E9%98%BF%E9%87%8C%E5%B7%B4%E5%B7%B4%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91%E5%AE%9E%E4%B9%A0%E6%80%BB%E7%BB%93/"/>
    <id>http://www.dobest.me/blog/2015/09/25/阿里巴巴前端开发实习总结/</id>
    <published>2015-09-24T16:00:00.000Z</published>
    <updated>2018-03-07T15:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>短暂的两个月实习转眼间就结束了，回想第一天来报到的场景还历历在目。很庆幸能有这样一次宝贵的机会来到阿里，来到FGT这个大家庭同大家一起学习，我想这注定会是一段珍贵难忘的经历。说到总结，在这两个月里自己对业务的了解、团队合作、项目的流程和沟通方面以及个人技术都有很大的收获。</p><a id="more"></a><h3 id="总结工作"><a href="#总结工作" class="headerlink" title="总结工作"></a>总结工作</h3><ul><li><p>Clink浮屏</p><ul><li>当初师兄安排这个工作之后，我花两个小时完成了demo。虽然是一个小日常，但是并没有自己想象的那么简单。不仅需要跟后端商量控制浮窗的接口、兼容现有的后台系统，还需要不断的打磨一些细节，然后上日常，上预发，最后才发布。发布之后又需要根据线上实际的表现进行修改。看似一个简单的日常，其实包含了许多流程，也从中学习到规范和严谨的重要性。</li></ul></li><li><p>在线协作Markdown编辑器</p><ul><li>这是属于一个创新的小日常，起初没有多想就开始动手做，后面发现实现起来其实有很多细节的问题需要考虑，导致实现的demo体验不太好。后来翻阅一些资料，也参考了别人的一些实现，才把这个功能基本实现了，要真正实现良好的文本实时协作功能难点主要在于如何定制一个编辑器前端，纯文本的实现难度在于同步的差异化算法或Operational Transformation(OT)算法，这也让自己意识到今后应该更加注重基础算法的培养。</li></ul></li><li><p>阿暖梦想跑道</p><ul><li>这是我完成的第一个完整的项目，经历了从视觉评审到项目构建、开发、联调、测试等各个阶段。这也是自己觉得实现地还不错的一个作品，能够比较清晰的组织和控制流程，测试过程中也很少有功能性的bug。更重要的是从这个项目中，我学会了应该怎样优雅地定制接口，怎样将flexbox、modulex、xTemplate运用到生产环境中。</li></ul></li><li><p>梦想团-服务提效：TODOLIST&amp;详情</p><ul><li>实习一个月之后，就投入精力跟着@石霸师兄一起开发TODOLIST&amp;详情，一开始觉得这对自己是个不小的挑战，而且时间上也比较紧张，还好有师兄不厌其烦的指导和帮助才能顺利地按时完成任务。项目初期，我很快学了一下Angular.js，第一次做比较复杂的前端项目，出于今后的维护和项目的稳定性考虑，需要不断地思考，尝试抽象更灵活的组织方式。在这个项目开发中，我也经常跟开发、交互、测试同学讨论实现方案。这真正让我感受到自己不再仅仅是一个实习生，我也可以很好的融入到项目开发的氛围中去。</li></ul></li></ul><h4 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h4><p>千言万语唯有感谢，感谢所有师兄师姐在工作和生活上的关心和帮助，感谢@清羽@常胤让我在大二的夏天能有这样一次宝贵的经历，感谢@石霸师兄不仅仅在技术上给予我良好的引导和鼓励，提供建议和方案，不厌其烦地帮助我解决一些困难，更多的是教诲我如何为人处事，独当一面，如何更好的规划自己将来的发展，如何在提高技术的同时也不断提升自己的软实力。我想这将是未来人生一笔宝贵的财富。</p><p>总结自己，在平时工作中我也发现自己有很多不足，发现自己和别人的差距，在这样一个优秀的团体，时刻需要不断的学习和总结，同时也希望自己能更有自信一些，能更积极主动地提出自己的见解，开放心态。</p><p>短短的60天，还没来得及跟大家更好的了解彼此，就要说再见了，很高兴认识你们这一帮良师益友，期待今后我们有缘再相聚！最后祝各位工作顺利，一切都好，大家中秋节快乐~~</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;短暂的两个月实习转眼间就结束了，回想第一天来报到的场景还历历在目。很庆幸能有这样一次宝贵的机会来到阿里，来到FGT这个大家庭同大家一起学习，我想这注定会是一段珍贵难忘的经历。说到总结，在这两个月里自己对业务的了解、团队合作、项目的流程和沟通方面以及个人技术都有很大的收获。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>React Native构建本地视图组件</title>
    <link href="http://www.dobest.me/blog/2015/05/10/React%20Native%E6%9E%84%E5%BB%BA%E6%9C%AC%E5%9C%B0%E8%A7%86%E5%9B%BE%E7%BB%84%E4%BB%B6/"/>
    <id>http://www.dobest.me/blog/2015/05/10/React Native构建本地视图组件/</id>
    <published>2015-05-09T16:00:00.000Z</published>
    <updated>2018-03-07T15:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>在使用React Native开发App的过程中，我们可能需要调用RN没有实现的原生视图组件或第三方组件。甚至，我们可以把本地模块构造成一个React Native组件，提供给别人使用。由于我自己开发中遇到了这样的问题，于是通过查看源码和一些资料总结出了构建的一个流程。</p><a id="more"></a><p>如果是调用本地的Api，那么可以直接使用<code>RCTBridgeModule</code>进行访问，目前已经实现了对Swift的支持，详见文档(<a href="http://wiki.jikexueyuan.com/project/react-native/native-modules.html" target="_blank" rel="noopener">中文</a>，<a href="http://facebook.github.io/react-native/docs/nativemodulesios.html#content" target="_blank" rel="noopener">英文(较新)</a>)。我们这里讲的是如何进行本地视图组件的封装。下面进入正题：</p><p>要构建本地组件，我们要继承<code>RCTViewManager</code>这个类，以及使用JavaScript进行接口封装。为了不增加教程的篇幅，我们以简单的Swich组件为例。</p><p>首先，我们需要使用obj-c或者swift封装好组件的接口。</p><pre class="line-numbers language-obj-c"><code class="language-obj-c">#import <UIKit/UIKit.h>@interface RCTSwitch : UISwitch    //继承UISwitch@property (nonatomic, assign) BOOL wasOn;@end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>然后实现</p><pre class="line-numbers language-obj-c"><code class="language-obj-c">#import "RCTSwitch.h"#import "RCTEventDispatcher.h"#import "UIView+React.h"@implementation RCTSwitch- (void)setOn:(BOOL)on animated:(BOOL)animated {  _wasOn = on;  [super setOn:on animated:animated];}@end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="RCTSwitchManager-h"><a href="#RCTSwitchManager-h" class="headerlink" title="RCTSwitchManager.h"></a>RCTSwitchManager.h</h3><pre class="line-numbers language-obj-c"><code class="language-obj-c">#import "RCTViewManager.h"@interface RCTSwitchManager : RCTViewManager@end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>这是一个视图管理器的头文件，命名规范为 视图名称+Manager. 视图名称可以加上自己的前缀，这里最好避免使用RCT前缀，除非你想给官方pull request.</p><pre class="line-numbers language-obj-c"><code class="language-obj-c">#import "RCTSwitchManager.h"    // 首先导入头文件#import "RCTBridge.h"    //进行通信的头文件#import "RCTEventDispatcher.h"    //事件派发，不导入会引起Xcode警告#import "RCTSwitch.h"    //第三方组件的头文件#import "UIView+React.h"    //若使用React封装的UIView(例如reactTag)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是实现的部分：</p><pre class="line-numbers language-obj-c"><code class="language-obj-c">@implementation RCTSwitchManagerRCT_EXPORT_MODULE()- (UIView *)view{  RCTSwitch *switcher = [[RCTSwitch alloc] init];  [switcher addTarget:self               action:@selector(onChange:)     forControlEvents:UIControlEventValueChanged];  return switcher;}- (void)onChange:(RCTSwitch *)sender{  if (sender.wasOn != sender.on) {    [self.bridge.eventDispatcher sendInputEventWithName:@"topChange" body:@{       @"target": sender.reactTag,       @"value": @(sender.on)     }];    sender.wasOn = sender.on;  }}RCT_EXPORT_VIEW_PROPERTY(onTintColor, UIColor);RCT_EXPORT_VIEW_PROPERTY(tintColor, UIColor);RCT_EXPORT_VIEW_PROPERTY(thumbTintColor, UIColor);RCT_EXPORT_VIEW_PROPERTY(on, BOOL);RCT_EXPORT_VIEW_PROPERTY(enabled, BOOL);@end<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里首先调用<code>ECT_EXPORT_MODULE()</code>的宏，让模块接口暴露给JavaScript，然后我们必须定义<code>- (UIView *)view</code> 这个方法来创建并返回组件视图，同时我们对视图事件进行监听。<br>紧接着我们实现了<code>- (void)onChange:(RCTSwitch *)sender</code>这个处理回调，<code>target</code>就是视图组件的一个实例，最后我们通过事件派发器的<code>sendInputEventWithName</code>方法来包装事件，其中”topChange”映射到UIManager中的<code>onChange</code>事件，也对应到我们组件的<code>onChange</code>属性详见<strong>./React/Modules/RCTUIManager.m</strong>文件。</p><pre class="line-numbers language-obj-c"><code class="language-obj-c">@"topChange": @{      @"phasedRegistrationNames": @{        @"bubbled": @"onChange",        @"captured": @"onChangeCapture"      }}<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件的最后的<code>RCT_EXPORT_VIEW_PROPERTY()</code>这个宏来设置该组件接受的参数及其类型。js中没有的类型，将会被自动类型转换。</p><p>下面使用JavaScript对本地组件进行封装，</p><pre class="line-numbers language-js"><code class="language-js"><span class="token string">'use strict'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 导入本地方法的封装</span><span class="token keyword">var</span> NativeMethodsMixin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'NativeMethodsMixin'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// React属性的类型系统</span><span class="token keyword">var</span> PropTypes <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ReactPropTypes'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 导入React</span><span class="token keyword">var</span> React <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'React'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 视图属性</span><span class="token keyword">var</span> ReactIOSViewAttributes <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'ReactIOSViewAttributes'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 样式</span><span class="token keyword">var</span> StyleSheet <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'StyleSheet'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用该方法生成本地组件</span><span class="token keyword">var</span> createReactIOSNativeComponentClass <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'createReactIOSNativeComponentClass'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 使用该方法进行视图属性的合并</span><span class="token keyword">var</span> merge <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">'merge'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>紧接着，我们通过<code>createReactIOSNativeComponentClass</code>创建RCTSwitch类。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> RCTSwitch <span class="token operator">=</span> <span class="token function">createReactIOSNativeComponentClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">// 指定有效的属性</span>  validAttributes<span class="token punctuation">:</span> rkSwitchAttributes<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">// 类名，与RCTSwitchManager相对应</span>  uiViewClassName<span class="token punctuation">:</span> <span class="token string">'RCTSwitch'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 暴露该组件的相关属性，使用merge方法合并了UIView中的所有属性</span><span class="token keyword">var</span> rkSwitchAttributes <span class="token operator">=</span> <span class="token function">merge</span><span class="token punctuation">(</span>ReactIOSViewAttributes<span class="token punctuation">.</span>UIView<span class="token punctuation">,</span> <span class="token punctuation">{</span>  onTintColor<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  tintColor<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  thumbTintColor<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  on<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span>  enabled<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><code>validAttributes</code>中的属性对应的值若类型为number, boolean, string类型时，设置为true即可。复杂的数据类型，我们应使用 differ 函数。</p><p>最后我们来创建组件类，这里先声明一些数据类型</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> SWITCH <span class="token operator">=</span> <span class="token string">'switch'</span><span class="token punctuation">;</span>type DefaultProps <span class="token operator">=</span> <span class="token punctuation">{</span>  value<span class="token punctuation">:</span> boolean<span class="token punctuation">;</span>  disabled<span class="token punctuation">:</span> boolean<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>type Event <span class="token operator">=</span> Object<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>下面是类方法的抽象</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> SwitchIOS <span class="token operator">=</span> React<span class="token punctuation">.</span><span class="token function">createClass</span><span class="token punctuation">(</span><span class="token punctuation">{</span>  <span class="token comment" spellcheck="true">//导入本地方法</span>  mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>NativeMethodsMixin<span class="token punctuation">]</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//设置prop类型，保证组件能够被正确使用</span>  propTypes<span class="token punctuation">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//定义默认的props</span>  <span class="token function">getDefaultProps</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">_onChange</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>  <span class="token function">render</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在类中应该进行<code>prop</code>的类型和默认值的声明，当使用不当时，将会出错警告，这也保证程序的健壮性，类型详见 <a href="https://facebook.github.io/react/docs/reusable-components.html" target="_blank" rel="noopener">官方文档</a>。下面是具体的实现：</p><pre class="line-numbers language-js"><code class="language-js">mixins<span class="token punctuation">:</span> <span class="token punctuation">[</span>NativeMethodsMixin<span class="token punctuation">]</span><span class="token punctuation">,</span>  propTypes<span class="token punctuation">:</span> <span class="token punctuation">{</span>    value<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>bool<span class="token punctuation">,</span>    disabled<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>bool<span class="token punctuation">,</span>    onValueChange<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>func<span class="token punctuation">,</span>    onTintColor<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>    thumbTintColor<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>    tintColor<span class="token punctuation">:</span> PropTypes<span class="token punctuation">.</span>string<span class="token punctuation">,</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  getDefaultProps<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> DefaultProps <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>      value<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>      disabled<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-js"><code class="language-js">_onChange<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>event<span class="token punctuation">:</span> Event<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token comment" spellcheck="true">//通过event.nativeEvent传递本地事件给视图组件，这些事件是我们前面定义在obj-c中的</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>onChange <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onChange</span><span class="token punctuation">(</span>event<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>onValueChange <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span><span class="token function">onValueChange</span><span class="token punctuation">(</span>event<span class="token punctuation">.</span>nativeEvent<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 保证属性的值确实被改变</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>refs<span class="token punctuation">[</span>SWITCH<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">setNativeProps</span><span class="token punctuation">(</span><span class="token punctuation">{</span>on<span class="token punctuation">:</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  render<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>      <span class="token operator">&lt;</span>RCTSwitch        <span class="token comment" spellcheck="true">// 来自ReactIOSViewAttributes.UIView的属性</span>        ref<span class="token operator">=</span><span class="token punctuation">{</span>SWITCH<span class="token punctuation">}</span>        style<span class="token operator">=</span><span class="token punctuation">{</span><span class="token punctuation">[</span>styles<span class="token punctuation">.</span>rkSwitch<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>style<span class="token punctuation">]</span><span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// 来自RCTSwitchManager.m中导出的属性</span>        enabled<span class="token operator">=</span><span class="token punctuation">{</span><span class="token operator">!</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>disabled<span class="token punctuation">}</span>        on<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>value<span class="token punctuation">}</span>        onTintColor<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>onTintColor<span class="token punctuation">}</span>        thumbTintColor<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>thumbTintColor<span class="token punctuation">}</span>        tintColor<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>props<span class="token punctuation">.</span>tintColor<span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">// RCTSwitchManager.m中导出的方法</span>        onChange<span class="token operator">=</span><span class="token punctuation">{</span><span class="token keyword">this</span><span class="token punctuation">.</span>_onChange<span class="token punctuation">}</span>      <span class="token operator">/</span><span class="token operator">></span>    <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到此，我们就把RCTSwitch组件封装好了。如果要做成第三方组件，我们还需要把本地代码打包成静态库和xocdeproj文件。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在使用React Native开发App的过程中，我们可能需要调用RN没有实现的原生视图组件或第三方组件。甚至，我们可以把本地模块构造成一个React Native组件，提供给别人使用。由于我自己开发中遇到了这样的问题，于是通过查看源码和一些资料总结出了构建的一个流程。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript语言精粹阅读笔记(函数)</title>
    <link href="http://www.dobest.me/blog/2015/04/22/JavaScript%E8%AF%AD%E8%A8%80%E7%B2%BE%E7%B2%B9%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0(%E5%87%BD%E6%95%B0)/"/>
    <id>http://www.dobest.me/blog/2015/04/22/JavaScript语言精粹阅读笔记(函数)/</id>
    <published>2015-04-21T16:00:00.000Z</published>
    <updated>2018-03-07T15:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="/img/JavaScript-good-part-func.jpeg" alt="JavaScript语言精粹阅读笔记(函数)"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;/img/JavaScript-good-part-func.jpeg&quot; alt=&quot;JavaScript语言精粹阅读笔记(函数)&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript语言精粹阅读笔记(1~3)</title>
    <link href="http://www.dobest.me/blog/2015/04/17/JavaScript%E8%AF%AD%E8%A8%80%E7%B2%BE%E7%B2%B9%E9%98%85%E8%AF%BB%E7%AC%94%E8%AE%B0(1~3)/"/>
    <id>http://www.dobest.me/blog/2015/04/17/JavaScript语言精粹阅读笔记(1~3)/</id>
    <published>2015-04-16T16:00:00.000Z</published>
    <updated>2018-03-07T15:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<a id="more"></a><p><img src="http://dobest.qiniudn.com/JavaScript语言精粹1.jpeg" alt="阅读笔记"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;a id=&quot;more&quot;&gt;&lt;/a&gt;
&lt;p&gt;&lt;img src=&quot;http://dobest.qiniudn.com/JavaScript语言精粹1.jpeg&quot; alt=&quot;阅读笔记&quot;&gt;&lt;/p&gt;

      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>模拟登录教务处查询成绩</title>
    <link href="http://www.dobest.me/blog/2015/04/08/%E6%A8%A1%E6%8B%9F%E7%99%BB%E5%BD%95%E6%95%99%E5%8A%A1%E5%A4%84%E6%9F%A5%E8%AF%A2%E6%88%90%E7%BB%A9/"/>
    <id>http://www.dobest.me/blog/2015/04/08/模拟登录教务处查询成绩/</id>
    <published>2015-04-07T16:00:00.000Z</published>
    <updated>2018-03-07T15:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p>在我们学校有一个“东大小秘书”的微信应用，可以利用它直接查询成绩，十分方便。于是我也想着自己去实现一个，这并没有很大的难度。关键是需要通过验证码认证。</p><a id="more"></a><p>这里无非就是模拟登录教务处然后抓取数据，之后进行HTML解析即可。比较有难度的验证码破解，考虑到验证码并不是太复杂，可以使用第三方OCR库进行识别。经过对node的这方面的考察之后，发现了一个<code>dv</code>的第三方库，对<code>tesseract</code>进行了封装，使用起来十分方便，唯一缺憾就是目前仅支持到<code>node v0.10</code>版本。</p><p>话不多说，下面开始动手。</p><p>由于考虑到今后可能提供公众服务，这里手动搭建了一个HTTP服务器。GET的方式进行查询。地址构造如下： <code>/?id=xxx&amp;pw=xxx</code>   ，获取到用户名和密码之后直接进入到查询环节。这里查询步骤有：</p><ol><li>获取验证码</li><li>验证码识别</li><li>尝试登录</li><li>获得成绩HTML数据</li><li>解析成绩数据</li><li>返回成绩JSON数据</li></ol><p>为了控制程序异步流程，这里我使用了Promise(Bluebird)来组织代码。查询模块代码如下：</p><pre class="line-numbers language-js"><code class="language-js">    module<span class="token punctuation">.</span>exports <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> pw<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> defer <span class="token operator">=</span> Promise<span class="token punctuation">.</span><span class="token function">defer</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">function</span> <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">getVerifyCode</span><span class="token punctuation">(</span>id<span class="token punctuation">,</span> pw<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>login<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>fetchScore<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span>HTMLParser<span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    defer<span class="token punctuation">.</span><span class="token function">resolve</span><span class="token punctuation">(</span>json<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span>                <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>err <span class="token operator">===</span> <span class="token string">'CODE-ERROR'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 错误递归</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>err <span class="token operator">===</span> <span class="token string">'LOGIN-ERROR'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 同上</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>err <span class="token operator">===</span> <span class="token string">'PW-ERROR'</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        defer<span class="token punctuation">.</span><span class="token function">reject</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span><span class="token string">'password_error'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> defer<span class="token punctuation">.</span>promise<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>查询过程可能存在 <strong>验证码错误</strong>，<strong>登录失败</strong>, <strong>密码错误</strong>等错误。如果遇到前两种错误则递归重新进行查询，密码错误则返回错误信息给用户。</p><h3 id="获取并解析验证码"><a href="#获取并解析验证码" class="headerlink" title="获取并解析验证码"></a>获取并解析验证码</h3><p>我们知道验证码的原理就是服务器随机生成字符串然后返回给用户并将验证码写入服务器session中，用户输入之后与服务器session中的字符串进行验证从而判断是否正确。而session的原理是根据用户请求时夹带的cookie进行用户的甄别。所以我们利用cookie即可完成登录的操作。获取验证码的同时需要获取服务器返回的cookie值，作为用户的唯一标识。</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">var</span> getVerifyCode <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>id <span class="token punctuation">,</span>pw<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">var</span> cookie <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> options <span class="token operator">=</span> <span class="token punctuation">{</span>                host<span class="token punctuation">:</span><span class="token string">"202.118.31.197"</span><span class="token punctuation">,</span>                  path<span class="token punctuation">:</span><span class="token string">"/ACTIONVALIDATERANDOMPICTURE.APPPROCESS"</span><span class="token punctuation">,</span>                  method<span class="token punctuation">:</span><span class="token string">"get"</span><span class="token punctuation">,</span>                headers<span class="token punctuation">:</span><span class="token punctuation">{</span>                      <span class="token string">"Content-Length"</span><span class="token punctuation">:</span>contents<span class="token punctuation">.</span>length<span class="token punctuation">,</span>                              <span class="token string">"Cookie"</span><span class="token punctuation">:</span> cookie                <span class="token punctuation">}</span>            <span class="token punctuation">}</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> req <span class="token operator">=</span> http<span class="token punctuation">.</span><span class="token function">request</span><span class="token punctuation">(</span>options<span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">var</span> chunks <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                cookie <span class="token operator">=</span> res<span class="token punctuation">.</span>headers<span class="token punctuation">[</span><span class="token string">"set-cookie"</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>     <span class="token comment" spellcheck="true">// 获取并存储cookie, 也可以写入缓存，加速查询。</span>                res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">"data"</span><span class="token punctuation">,</span><span class="token keyword">function</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">{</span>                    chunks<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">var</span> imgBuff <span class="token operator">=</span> Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>chunks<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment" spellcheck="true">// 利用dv解析验证码</span>                    <span class="token keyword">var</span> image <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">dv<span class="token punctuation">.</span>Image</span><span class="token punctuation">(</span><span class="token string">'jpg'</span><span class="token punctuation">,</span> imgBuff<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">var</span> tesseract <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">dv<span class="token punctuation">.</span>Tesseract</span><span class="token punctuation">(</span><span class="token string">'eng'</span><span class="token punctuation">,</span> image<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">var</span> verifyCode <span class="token operator">=</span> tesseract<span class="token punctuation">.</span><span class="token function">findText</span><span class="token punctuation">(</span><span class="token string">'plain'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token keyword">var</span> len <span class="token operator">=</span> verifyCode<span class="token punctuation">.</span>length<span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>len <span class="token operator">!==</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'CODE-ERROR'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 验证码明显有错误</span>                    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                        <span class="token keyword">var</span> obj <span class="token operator">=</span> <span class="token punctuation">{</span>                                   id<span class="token punctuation">:</span> id<span class="token punctuation">,</span>                                   pw<span class="token punctuation">:</span> pw<span class="token punctuation">,</span>                                   cookie<span class="token punctuation">:</span> cookie<span class="token punctuation">,</span>                                   verifyCode<span class="token punctuation">:</span> verifyCode                               <span class="token punctuation">}</span><span class="token punctuation">;</span>                        <span class="token function">resolve</span><span class="token punctuation">(</span>obj<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 验证码可能正确，先到下一步去</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            req<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span>contents<span class="token punctuation">)</span><span class="token punctuation">;</span>            req<span class="token punctuation">.</span><span class="token function">end</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>以上利用了<strong>http.request</strong>模块对服务器发起GET请求，成功获取验证码并尝试解析它。以上代码需要注意一个Buffer的处理。不要对Buffer进行相加，正确的做法应该是将每一块数据放入数组中，最后合并数组得到Buffer完整数据。</p><h3 id="尝试登录"><a href="#尝试登录" class="headerlink" title="尝试登录"></a>尝试登录</h3><p>利用上一步得到的cookie和验证码字符串尝试进行用户登录。使用POST请求，在headers内夹带cookie字段，然后构造一个请求体，然后请求。之后使用<strong>iconv-lite</strong>对文档进行解码。</p><pre class="line-numbers language-js"><code class="language-js">    res<span class="token punctuation">.</span><span class="token function">on</span><span class="token punctuation">(</span><span class="token string">'end'</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">var</span> decodedBody <span class="token operator">=</span> iconv<span class="token punctuation">.</span><span class="token function">decode</span><span class="token punctuation">(</span>Buffer<span class="token punctuation">.</span><span class="token function">concat</span><span class="token punctuation">(</span>chunk<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'gbk'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>decodedBody<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// getCode();</span>            <span class="token comment" spellcheck="true">// return;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>decodedBody<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'您的密码不正确'</span><span class="token punctuation">)</span><span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'PW-ERROR'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                <span class="token function">reject</span><span class="token punctuation">(</span><span class="token string">'LOGIN-ERROR'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>cookie<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">// 传cookie给下一步</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解码之后需要判断一下错误，可能存在上一环节的验证码错误或者用户的密码错误。如果没有错误则进行下一步。这里需要将cookie传入下一步，这个时候使用该cookie就可以进行后台操作了。</p><h3 id="获取成绩页面数据"><a href="#获取成绩页面数据" class="headerlink" title="获取成绩页面数据"></a>获取成绩页面数据</h3><p>到了这一步就很简单了，夹带cookie，GET请求成绩页面的数据。进行解码，然后传入<code>HTMLParser()</code></p><h3 id="解析HTML数据"><a href="#解析HTML数据" class="headerlink" title="解析HTML数据"></a>解析HTML数据</h3><p>上一步我们得到了成绩页面的HTML数据，我们需要对代码进行处理从而得到我们需要的成绩信息。node中有一个<code>cheerio</code>库，可以像jQuery一样操作HTML DOM。这里感觉自己用的不是很恰当，感觉过程有点麻烦。看官稍微看看就行，这个也很容易使用。</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">var</span> HTMLParser <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Promise</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>resolve<span class="token punctuation">,</span> reject<span class="token punctuation">)</span> <span class="token punctuation">{</span>            $ <span class="token operator">=</span> cheerio<span class="token punctuation">.</span><span class="token function">load</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> score <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.color-rowNext'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> ascore <span class="token operator">=</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">'.color-row'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">var</span> ret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> score<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> course <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> mark <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token punctuation">(</span>score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'children'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'children'</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                course <span class="token operator">=</span> score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'children'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'children'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mark <span class="token operator">=</span> score<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'children'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'children'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    course<span class="token punctuation">:</span> course<span class="token punctuation">,</span>                    score<span class="token punctuation">:</span> mark                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> ascore<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token keyword">var</span> course <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>                <span class="token keyword">var</span> mark <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">;</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span> <span class="token punctuation">(</span>ascore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'children'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'children'</span><span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">break</span><span class="token punctuation">;</span>                course <span class="token operator">=</span> ascore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'children'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'children'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">trim</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                mark <span class="token operator">=</span> ascore<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'children'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'children'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                ret<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                    course<span class="token punctuation">:</span> course<span class="token punctuation">,</span>                    score<span class="token punctuation">:</span> mark                <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>            <span class="token function">resolve</span><span class="token punctuation">(</span>JSON<span class="token punctuation">.</span><span class="token function">stringify</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>到这里我们就成功的获取到了成绩啦。在操作的过程中需要对错误进行处理，使得用户能一次性得到准确的成绩数据。</p><p>最后，我们把数据模块封装，给服务器模块调用即可。我把代码放到Github上了，有兴趣的可以看看。如有错误，欢迎指出。</p><p><a href="https://github.com/ele828/neu_score_query" target="_blank" rel="noopener">=&gt;<code>程序源码</code></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;在我们学校有一个“东大小秘书”的微信应用，可以利用它直接查询成绩，十分方便。于是我也想着自己去实现一个，这并没有很大的难度。关键是需要通过验证码认证。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>手机跑酷游戏开发小记</title>
    <link href="http://www.dobest.me/blog/2015/04/05/%E6%89%8B%E6%9C%BA%E8%B7%91%E9%85%B7%E6%B8%B8%E6%88%8F%E5%BC%80%E5%8F%91%E5%B0%8F%E8%AE%B0/"/>
    <id>http://www.dobest.me/blog/2015/04/05/手机跑酷游戏开发小记/</id>
    <published>2015-04-04T16:00:00.000Z</published>
    <updated>2018-03-07T15:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><a href="http://v.youku.com/v_show/id_XNzkzMjM2MTk2.html" target="_blank" rel="noopener">观看演示视频</a></p><p>为了参加比赛，这个暑假开发了这款跑酷类手机小游戏。虽然辛苦，也学到不少东西，至少作品还算满意吧。</p><a id="more"></a><p>从准备到开发确实花了不少时间，虽说真正开发大概只有十来天的样子，前期也需要熟悉框架，了解开发的流程，团队开发的磨合等等。</p><p>这款手游是基于<code>Cocos2d-JS</code>开源引擎，通过SpiderMonkey + js-binding的方式调用底层<code>Cocos2d-x</code>的引擎。</p><p>可能有的人会质疑这样操作的效率，后来事实证明，这样的方式效率虽然有待改善，但至少也轻松虐了一番Canvas在手机的表现。</p><p>本篇文章不过多的介绍  <code>cocos2d-js</code>引擎的使用，而仅讨论一些心得。</p><p>效率的问题一方面可能是引擎引起的，肯定也有开发者的问题。起初开发时没有过多的考虑游戏效率问题，到后来发布APK发现手机表现差强人意才进行了一些优化。优化主要考虑到以下几个方面：</p><ol><li><p>图像资源的预加载</p></li><li><p>plist文件预加载</p></li><li><p>减少粒子数目</p></li><li><p>资源的复用</p></li></ol><p>还有其他的资源需要加载，例如动画资源等，但由于前期的疏忽加之时间紧迫，这次没有进行预加载。</p><h2 id="预加载实现"><a href="#预加载实现" class="headerlink" title="预加载实现"></a>预加载实现</h2><p>我们可以在游戏开始前的场景或者消耗少的地方进行资源预热，事先载入缓存中。这里只交代cc(cocos2d简称)的加载方式：</p><pre class="line-numbers language-js"><code class="language-js">    cc<span class="token punctuation">.</span>spriteFrameCache<span class="token punctuation">.</span><span class="token function">addSpriteFrames</span><span class="token punctuation">(</span>res<span class="token punctuation">.</span>gold<span class="token punctuation">.</span>plist<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//plist预加载方式</span>    <span class="token comment" spellcheck="true">/*以下加载图片至内存*/</span>    <span class="token comment" spellcheck="true">//获取所有图像</span>    String<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>endWith<span class="token operator">=</span><span class="token keyword">function</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token operator">==</span><span class="token keyword">null</span><span class="token operator">||</span>s<span class="token operator">==</span><span class="token string">""</span><span class="token operator">||</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">==</span><span class="token number">0</span><span class="token operator">||</span>s<span class="token punctuation">.</span>length<span class="token operator">></span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>length<span class="token operator">-</span>s<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token operator">==</span>s<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token keyword">else</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//变量获得图像,资源文件使用对象字面量嵌套的原因，略显啰嗦</span>    <span class="token keyword">var</span> temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> res<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"object"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> j <span class="token keyword">in</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">instanceof</span> <span class="token class-name">Array</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token keyword">continue</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">endWith</span><span class="token punctuation">(</span><span class="token string">"plist"</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span>                        <span class="token operator">!</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">endWith</span><span class="token punctuation">(</span><span class="token string">"mp3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                            temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token punctuation">}</span>                    <span class="token punctuation">}</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">typeof</span> res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token string">"string"</span><span class="token punctuation">)</span><span class="token punctuation">{</span>                <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">endWith</span><span class="token punctuation">(</span><span class="token string">"plist"</span><span class="token punctuation">)</span>                     <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">endWith</span><span class="token punctuation">(</span><span class="token string">"mp3"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                        temp<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span>    <span class="token comment" spellcheck="true">//载入内存，这步是关键</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token keyword">in</span> temp<span class="token punctuation">)</span> <span class="token punctuation">{</span>        cc<span class="token punctuation">.</span>textureCache<span class="token punctuation">.</span><span class="token function">addImage</span><span class="token punctuation">(</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里主要使用两个方法,<code>cc.spriteFrameCache.addSpriteFrames(PLIST);</code>和<code>cc.textureCache.addImage(IMAGE)</code>进行载入。</p><h2 id="对象池资源复用"><a href="#对象池资源复用" class="headerlink" title="对象池资源复用"></a>对象池资源复用</h2><p>关于对象池，是我们讨论的重点。由于缺乏经验和游戏前辈指导，我们起初就选错了方式，对于跑酷，飞行等这些需要频繁重复使用同样对象的游戏来说，应该使用对象池的方式进行重复利用，提高效率。这里感谢一下俊文学长的点拨。</p><p>虽说如此，我仍然犯了一个致命的错误，这个bug到最后上交作品仍没有解决，为时已晚。</p><p>我先说我使用的方式，游戏开始时，产生一只<strong>小鸟</strong>,一只<strong>青蛙</strong>,若干个<strong>道具</strong>，以及需要用到的大概20个左右的<strong>金币道具</strong>，一次性全部载入内存，并加入场景中。角色奔跑之后，动态的根据条件和概率更新这些物体的位置，从而多次复用。其实想想这样的做法好像也挺好，但不幸的是我们游戏使用了Chipmunk物理引擎。</p><blockquote><p> 物理引擎中频繁操作物体，删除或者移动body等操作容易造成空指针等一系列bug。</p></blockquote><p>用js开发游戏确实非常便利，尤其是调试，所见即得。但要是发生例如操作内存的错误，却是那么无奈。其实最终我们也没有找到真正的原因，游戏运行一段时间就会自动崩溃退出，崩溃的原因为 <em>EXC_BAD_ACCESS</em>，指针访问了一块无权的访问的内存。但我采用频繁移动body的方式进行复用确实过于暴力。cc中有个对象缓冲池，我们可以利用它进行对象复用。</p><h2 id="编写支持cc-pool的类"><a href="#编写支持cc-pool的类" class="headerlink" title="编写支持cc.pool的类"></a>编写支持cc.pool的类</h2><p>首先，类中必须包含<code>unuse()</code>和<code>reuse()</code>函数，当你将<code>unuse()</code>函数放入缓冲池中时，<code>cc.pool</code>将会调用该函数；当你从缓冲池中检索一个对象，并使用给定参数对其初始化时，<code>cc.pool</code>则将调用<code>reuse()</code>函数。</p><p>下面是一个名为MySprite的类。</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> MySprite <span class="token operator">=</span> cc<span class="token punctuation">.</span>Sprite<span class="token punctuation">.</span><span class="token function">extend</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    _hp<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    _sp<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>    _mp<span class="token punctuation">:</span> <span class="token number">0</span><span class="token punctuation">,</span>ctor<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">_super</span><span class="token punctuation">(</span>s_grossini<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initData</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>initData<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_hp <span class="token operator">=</span> f1<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_mp <span class="token operator">=</span> f2<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_sp <span class="token operator">=</span> f3<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>unuse<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_hp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_mp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>_sp <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">removeFromParent</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span>reuse<span class="token punctuation">:</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">initData</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">setVisible</span><span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>MySprite<span class="token punctuation">.</span>create <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">MySprite</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>MySprite<span class="token punctuation">.</span>reCreate <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">var</span> pool <span class="token operator">=</span> cc<span class="token punctuation">.</span>pool<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pool<span class="token punctuation">.</span><span class="token function">hasObj</span><span class="token punctuation">(</span>MySprite<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> pool<span class="token punctuation">.</span><span class="token function">getFromPool</span><span class="token punctuation">(</span>MySprite<span class="token punctuation">,</span> f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span>  MySprite<span class="token punctuation">.</span><span class="token function">create</span><span class="token punctuation">(</span>f1<span class="token punctuation">,</span> f2<span class="token punctuation">,</span> f3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其实无非就是需要的时候加载一下，设置可见，不使用的时候设置不可见并从层中移除即可。官网的<a href="http://cn.cocos2d-x.org/tutorial/show?id=1316" target="_blank" rel="noopener">教程</a>略有出错，这里稍作修改。我们的代码不用考虑到<code>retain()</code>和<code>release()</code>等内存管理，原因是引擎已经帮助我们进行了管理。</p><h2 id="往对象池添加对象"><a href="#往对象池添加对象" class="headerlink" title="往对象池添加对象"></a>往对象池添加对象</h2><p>cc.pool.putInPool(object);<br>putInPool函数将调用object.unuse()，并将其放到cc.pool中以备后面使用。</p><h2 id="在对象池中检索对象"><a href="#在对象池中检索对象" class="headerlink" title="在对象池中检索对象"></a>在对象池中检索对象</h2><p>当你想要从缓冲池中获取一个对象时，你可以通过给getFromPool方法传递类名和参数得到一个可用的对象或者空对象。在对象被返回之前，缓冲池将调用reuse函数，并用参数args来初始化该对象。</p><h2 id="检查是否存在有效对象"><a href="#检查是否存在有效对象" class="headerlink" title="检查是否存在有效对象"></a>检查是否存在有效对象</h2><p>var exist = cc.pool.hasObj(“MySprite”);</p><h2 id="从cc-pool中删除对象"><a href="#从cc-pool中删除对象" class="headerlink" title="从cc.pool中删除对象"></a>从cc.pool中删除对象</h2><p>cc.pool.removeObj(object);</p><h2 id="清空缓冲池"><a href="#清空缓冲池" class="headerlink" title="清空缓冲池"></a>清空缓冲池</h2><p>cc.pool.drainAllPools();</p><p>当切换游戏场景时，在旧场景中的对象可能将不再有用。可以清空对象池节约内存开支。<code>CC.POOL</code>的内部实现也很简单，其实就是将当前对象弹入数组中保存起来，需要的时候再进行抽取即可。</p><h2 id="提高游戏可玩性"><a href="#提高游戏可玩性" class="headerlink" title="提高游戏可玩性"></a>提高游戏可玩性</h2><p>老实说，我平时并不怎么玩游戏。从以前做互相网站的角度来说，与用户的交互显得非常重要。这方面需要与美术、音乐做到完美配合。我喜欢做类似互动这一类的工作，我喜欢贴近去感受用户的需求。这次做这个手游，我也尽量把整个游戏做<strong>活</strong>，其实市场上的游戏已经都做到了最基本的这一点。<br>游戏好不好玩，不仅需要创意，更要考虑到场景设置，道具安排，游戏的触控体验等等方面。<br>最后还要感谢一下yfwz学长能够屈尊跟我组队参加比赛，而且在开发游戏上也下了功夫，关键还能提供技术支持啊，赞！<br>大概就是这些了，做游戏真的是个体力活，尤其是对我这样一个有点<em>强迫症</em>的人来说，容不得一点不好啊。不过，过程倒也是蛮有趣的，至少也算是一次新的尝试吧。:P</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;a href=&quot;http://v.youku.com/v_show/id_XNzkzMjM2MTk2.html&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;观看演示视频&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;为了参加比赛，这个暑假开发了这款跑酷类手机小游戏。虽然辛苦，也学到不少东西，至少作品还算满意吧。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计笔记三</title>
    <link href="http://www.dobest.me/blog/2015/04/01/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E4%B8%89/"/>
    <id>http://www.dobest.me/blog/2015/04/01/JavaScript高级程序设计笔记三/</id>
    <published>2015-03-31T16:00:00.000Z</published>
    <updated>2018-03-07T15:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>函数表达式</strong></p><p>JS中定义函数有两种方式，一种是函数声明，另外一种是函数表达式。函数声明存在函数声明提升的过程，函数表达式则无此过程。</p><p>匿名函数，也叫lamda函数。即function后没有标识符</p><a id="more"></a><p>以下的代码在ECMAScript中属于无效语法：</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>“Hello”<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      <span class="token keyword">function</span> <span class="token function">say</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>“No”<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应该使用匿名函数的方式来写：</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">var</span> say<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token boolean">true</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>      say <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>“Hello”<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>      say <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token function">alert</span><span class="token punctuation">(</span>“No”<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">}</span>    <span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>JS中如果需要使用递归函数，那么应该使用arguments.callee来代替函数名，这样确保不会出现问题，最好不要直接填写自身函数名。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;函数表达式&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;JS中定义函数有两种方式，一种是函数声明，另外一种是函数表达式。函数声明存在函数声明提升的过程，函数表达式则无此过程。&lt;/p&gt;
&lt;p&gt;匿名函数，也叫lamda函数。即function后没有标识符&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>JavaScript高级程序设计笔记二</title>
    <link href="http://www.dobest.me/blog/2015/03/30/JavaScript%E9%AB%98%E7%BA%A7%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E7%AC%94%E8%AE%B0%E4%BA%8C/"/>
    <id>http://www.dobest.me/blog/2015/03/30/JavaScript高级程序设计笔记二/</id>
    <published>2015-03-30T03:45:31.000Z</published>
    <updated>2018-03-07T15:36:17.000Z</updated>
    
    <content type="html"><![CDATA[<p><strong>引用类型</strong><br>ECMAScript是面向对象的语言，但是并没用类的概念，因为没有类和接口。所以我们一般称之为引用类型。</p><a id="more"></a><p>以下是创建Array类型的几种方式：</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Array</span><span class="token punctuation">(</span><span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token function">Array</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> colors <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"red"</span><span class="token punctuation">,</span> <span class="token string">"blue"</span><span class="token punctuation">,</span> <span class="token string">"green"</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> values <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//这样会创建2或3项的数组（IE8或之前创建3个元素）</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>数组和对象使用字面量来定义时，不会调用构造函数</p><p>数组对象如果超过了索引，它会自动增加长度</p><p>数组中的length属性不是只读的，是可写的，可以通过修改length的值来移除末尾的项</p><p>alert一个数组，会后台自动调用toString()方法，与其效果一致</p><p>数组中null或undefined返回字符串时将以空字符串来表示</p><p>数组中的栈方法使用<code>push()</code> <code>pop()</code> 队列方法使用<code>push()</code> <code>shift()</code> <code>unshift()</code>是在第一个位置插入一直数值并返回数组长度</p><p>数组中<code>sort()</code>会调用每个数组项的<code>toString()</code>方法，然后再按照升序来排序</p><p>可以利用如下方法来对数字数组进行排序</p><pre class="line-numbers language-js"><code class="language-js">    values<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>value1<span class="token punctuation">,</span> value2<span class="token punctuation">)</span><span class="token punctuation">{</span>       <span class="token keyword">return</span> value1 <span class="token operator">-</span> value2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>concat()可以复制一个数组，还可以传入新的参数，放在元数组的末尾。<code>slice(1)</code>从位置1开始复制到末尾，<code>slice(1, 4)</code>，从1赋值到位置3结束。<br><code>splice(0,2, &quot;red&quot;, &quot;green&quot;);</code>  替换或者删除数组中的元素并返回一个被删除的元素的数组</p><p>函数是对象，函数名是指针。定义函数的三种方式:</p><pre class="line-numbers language-js"><code class="language-js">    <span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span>val1<span class="token punctuation">,</span>val2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> val1<span class="token operator">+</span>val2<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span>va1<span class="token punctuation">,</span> val2<span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> val1<span class="token operator">+</span>val2<span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>   <span class="token comment" spellcheck="true">//这里有个分号，跟定义变量一致</span>    <span class="token comment" spellcheck="true">//不推荐这样的用法，性能比较低，解析了两次代码</span>    <span class="token keyword">var</span> sum <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Function</span><span class="token punctuation">(</span><span class="token string">"val1"</span><span class="token punctuation">,</span> <span class="token string">"val2"</span><span class="token punctuation">,</span> <span class="token string">"return val1+val2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>代码执行之前，解析器会执行 函数声明提升的过程，也就是说，函数的声明可以在调用之后。JS引擎会自动在执行前把声明提前。</p><p>如果通过等价来声明函数表达式，并在之前调用。则会出现错误。</p><p><code>arguments</code>对象有一个calee的属性，该属性是一个指针，指向拥有这个arguments对象的函数</p><p>函数有两个属性，<em>length</em>和<em>prototype</em>。length表示函数希望接受到的参数个数</p><p>call(作用域, 每一次参数 )  apply(作用域，参数数组)  <code>bind(作用域)</code> 这三个函数都可以改变函数中this所指代的作用域</p><p>基本数据类型不是对象，但是会在后台执行基本包装类型的过程，这个与引用类型存在生存期的区别。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;引用类型&lt;/strong&gt;&lt;br&gt;ECMAScript是面向对象的语言，但是并没用类的概念，因为没有类和接口。所以我们一般称之为引用类型。&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
